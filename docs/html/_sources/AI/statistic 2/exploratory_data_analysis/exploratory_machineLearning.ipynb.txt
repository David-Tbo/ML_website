{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "credit_data = pd.read_csv(\"creditDefaultData.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(29601, 25)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "credit_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   ID  LIMIT_BAL  SEX  EDUCATION  MARRIAGE  AGE  PAY_0  PAY_2  PAY_3  PAY_4  \\\n",
      "0   1      20000    2          2         1   24      2      2     -1     -1   \n",
      "1   2     120000    2          2         2   26     -1      2      0      0   \n",
      "2   3      90000    2          2         2   34      0      0      0      0   \n",
      "3   4      50000    2          2         1   37      0      0      0      0   \n",
      "4   5      50000    1          2         1   57     -1      0     -1      0   \n",
      "\n",
      "              ...              BILL_AMT4  BILL_AMT5  BILL_AMT6  PAY_AMT1  \\\n",
      "0             ...                      0          0          0         0   \n",
      "1             ...                   3272       3455       3261         0   \n",
      "2             ...                  14331      14948      15549      1518   \n",
      "3             ...                  28314      28959      29547      2000   \n",
      "4             ...                  20940      19146      19131      2000   \n",
      "\n",
      "   PAY_AMT2  PAY_AMT3  PAY_AMT4  PAY_AMT5  PAY_AMT6  \\\n",
      "0       689         0         0         0         0   \n",
      "1      1000      1000      1000         0      2000   \n",
      "2      1500      1000      1000      1000      5000   \n",
      "3      2019      1200      1100      1069      1000   \n",
      "4     36681     10000      9000       689       679   \n",
      "\n",
      "   default payment next month  \n",
      "0                           1  \n",
      "1                           1  \n",
      "2                           0  \n",
      "3                           0  \n",
      "4                           0  \n",
      "\n",
      "[5 rows x 25 columns]\n"
     ]
    }
   ],
   "source": [
    "print credit_data.head() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 ID       LIMIT_BAL           SEX     EDUCATION      MARRIAGE  \\\n",
      "count  29601.000000    29601.000000  29601.000000  29601.000000  29601.000000   \n",
      "mean   14971.758927   167550.544914      1.603189      1.815479      1.555454   \n",
      "std     8660.184430   129944.020953      0.489244      0.710399      0.518092   \n",
      "min        1.000000    10000.000000      1.000000      1.000000      1.000000   \n",
      "25%     7474.000000    50000.000000      1.000000      1.000000      1.000000   \n",
      "50%    14953.000000   140000.000000      2.000000      2.000000      2.000000   \n",
      "75%    22463.000000   240000.000000      2.000000      2.000000      2.000000   \n",
      "max    30000.000000  1000000.000000      2.000000      4.000000      3.000000   \n",
      "\n",
      "                AGE         PAY_0         PAY_2         PAY_3         PAY_4  \\\n",
      "count  29601.000000  29601.000000  29601.000000  29601.000000  29601.000000   \n",
      "mean      35.464072     -0.014932     -0.131313     -0.163440     -0.218303   \n",
      "std        9.213243      1.124503      1.199642      1.199793      1.172220   \n",
      "min       21.000000     -2.000000     -2.000000     -2.000000     -2.000000   \n",
      "25%       28.000000     -1.000000     -1.000000     -1.000000     -1.000000   \n",
      "50%       34.000000      0.000000      0.000000      0.000000      0.000000   \n",
      "75%       41.000000      0.000000      0.000000      0.000000      0.000000   \n",
      "max       79.000000      8.000000      8.000000      8.000000      8.000000   \n",
      "\n",
      "                  ...                  BILL_AMT4      BILL_AMT5  \\\n",
      "count             ...               29601.000000   29601.000000   \n",
      "mean              ...               43122.554204   40235.545184   \n",
      "std               ...               64196.383913   60699.344884   \n",
      "min               ...             -170000.000000  -81334.000000   \n",
      "25%               ...                2329.000000    1780.000000   \n",
      "50%               ...               19005.000000   18091.000000   \n",
      "75%               ...               54271.000000   50072.000000   \n",
      "max               ...              891586.000000  927171.000000   \n",
      "\n",
      "           BILL_AMT6       PAY_AMT1      PAY_AMT2       PAY_AMT3  \\\n",
      "count   29601.000000   29601.000000  2.960100e+04   29601.000000   \n",
      "mean    38858.449816    5649.560319  5.894788e+03    5198.415898   \n",
      "std     59519.893043   16568.264941  2.308919e+04   17580.914806   \n",
      "min   -339603.000000       0.000000  0.000000e+00       0.000000   \n",
      "25%      1278.000000    1000.000000  8.250000e+02     390.000000   \n",
      "50%     17118.000000    2100.000000  2.007000e+03    1800.000000   \n",
      "75%     49121.000000    5005.000000  5.000000e+03    4500.000000   \n",
      "max    961664.000000  873552.000000  1.684259e+06  896040.000000   \n",
      "\n",
      "            PAY_AMT4       PAY_AMT5       PAY_AMT6  default payment next month  \n",
      "count   29601.000000   29601.000000   29601.000000                29601.000000  \n",
      "mean     4828.659268    4795.032735    5181.326374                    0.223134  \n",
      "std     15711.057992   15244.217154   17657.260739                    0.416355  \n",
      "min         0.000000       0.000000       0.000000                    0.000000  \n",
      "25%       298.000000     259.000000     138.000000                    0.000000  \n",
      "50%      1500.000000    1500.000000    1500.000000                    0.000000  \n",
      "75%      4014.000000    4042.000000    4000.000000                    0.000000  \n",
      "max    621000.000000  426529.000000  528666.000000                    1.000000  \n",
      "\n",
      "[8 rows x 25 columns]\n"
     ]
    }
   ],
   "source": [
    "print credit_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# the ID variable is of no use in the analysis. We will drop it. \n",
    "credit_data = credit_data.drop(\"ID\", axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    22996\n",
       "1     6605\n",
       "Name: default payment next month, dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "credit_data['default payment next month'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Distribution of Sex: \n",
      "2    17855\n",
      "1    11746\n",
      "Name: SEX, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# introducing factor variables. \n",
    "print \"Distribution of Sex: \"\n",
    "print credit_data['SEX'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Distribution of Education: \n",
      "2    14024\n",
      "1    10581\n",
      "3     4873\n",
      "4      123\n",
      "Name: EDUCATION, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print \"Distribution of Education: \"\n",
    "print credit_data['EDUCATION'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Distribution of marital status\n",
      "2    15806\n",
      "1    13477\n",
      "3      318\n",
      "Name: MARRIAGE, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print \"Distribution of marital status\"\n",
    "print credit_data['MARRIAGE'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Distribution of sex and credit default.\n",
      "default payment next month      0     1\n",
      "SEX                                    \n",
      "1                            8885  2861\n",
      "2                           14111  3744\n"
     ]
    }
   ],
   "source": [
    "print \"Distribution of sex and credit default.\"\n",
    "print pd.crosstab(credit_data['SEX'], \n",
    "                              credit_data['default payment next month'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Distribution of sex and credit default.\n",
      "default payment next month         0         1\n",
      "SEX                                           \n",
      "1                           0.756428  0.243572\n",
      "2                           0.790311  0.209689\n"
     ]
    }
   ],
   "source": [
    "print \"Distribution of sex and credit default.\"\n",
    "print (pd.crosstab(credit_data['SEX'], \n",
    "                              credit_data['default payment next month'])\n",
    "       .apply(lambda r: r/r.sum(), axis=1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x8f79668>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nWalEIqGSkhK98MILkqS5c+dq3rx5uv/++7V3716VlpZq3Lhxp/3u+vbtq7lz52rYsGEqKSnRxo0b\nVVZWpgsvvFCLFi1KtfvBD36gIUOGaOjQofr9739fb40n+xw7dmyqT3fXT37yExUVFWn06NHat2/f\nabUALZq7N9lXTXenS7d/w4YNXlhY6MeOHfPDhw97QUGB33PPPe7uPm7cOH/rrbfc3X3dunU+duxY\nd3dfunSpz549O/UcBw8edHf3RCLhsVjMt2zZ4u7uffv29QMHDri7+9/+9jcvLS097fHTp0/3FStW\npK13+vTpPn78eHd337Fjh/fs2dOPHz/un3zyiR8/fjy1f8SIEe7u/vzzz/ukSZPc3f3QoUN+wQUX\neCKR8KVLl/qFF17oR44c8X379nnnzp198eLF7u7+/e9/3xcsWFDv650+fbpfe+217u6+detWLygo\ncHf3eDzuEydOTFt7PB73888/3/fu3evV1dX+la98xdesWeMnTpzw0aNH+/79+93d/bHHHvObbrrJ\n3d1ff/11HzRokK9evdqLi4u9qqoq9XP84IMP0vbTp08fX7RoUeq1DB06NPU6u3Xr5u7uy5cv98su\nu8zd3SsrK71Xr17+/vvvZ6wxXZ9m5k8++aS7u99+++1+5513pq0n09gLjSSXnK/IvsIYF8k60+Zq\ns3jHZjovvviiJk+erA4dOqhDhw765je/KUk6cuSI1q5dq2uuuSa1SP/EiRNpn2PZsmV66KGHVFVV\npffff19bt27V4MGDI1ncf+2110qSCgoK1K9fP23btk19+vTRrFmz9Oqrr6pNmzbasWOHJGnMmDG6\n5ZZbdODAAS1fvlxXX3218vJq/ggqLS3Vueeeq3PPPVfnn3++rrzySknSkCFDtGXLlgZf76RJkyRJ\nAwcO1D//+c+sai8pKdGXvvQlSVJRUZF27dqlzp0767XXXtM3vvENubuqq6tTbQYNGqRp06bpyiuv\n1Lp169SmTRtJn04AMpk4cWLqtRw5ciT1Os855xwdPnxYa9as0ZQpUyRJXbt2VSwW0/r165Wfn5+2\nxtGjR5/WZ4cOHXTFFVdIkoYPH67Vq1dn9TMAWopmG+KZVFdXq0uXLqqoqKi33a5du3TPPfdow4YN\n6tSpk2bMmJG6INa2bVtVV1dL0hlfmKt9LtbdZWa699571b17d23evFmJREKf+9znUm1uuOEGPfro\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x9c613c8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "(pd.crosstab(credit_data['SEX'], \n",
    "                              credit_data['default payment next month'])\n",
    "       .apply(lambda r: r/r.sum(), axis=1)\n",
    " .plot.bar(stacked= True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Distribution of education and credit default.\n",
      "default payment next month         0         1\n",
      "EDUCATION                                     \n",
      "1                           0.807580  0.192420\n",
      "2                           0.762621  0.237379\n",
      "3                           0.746973  0.253027\n",
      "4                           0.943089  0.056911\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x99f07f0>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x9846048>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print \"Distribution of education and credit default.\"\n",
    "print (pd.crosstab(credit_data['EDUCATION'], \n",
    "                              credit_data['default payment next month'])\n",
    "       \n",
    "       .apply(lambda r: r/r.sum(), axis=1))\n",
    "(pd.crosstab(credit_data['EDUCATION'], \n",
    "                              credit_data['default payment next month'])\n",
    "       .apply(lambda r: r/r.sum(), axis=1)\n",
    " .plot.bar(stacked= True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Distribution of marriage and credit default.\n",
      "default payment next month         0         1\n",
      "MARRIAGE                                      \n",
      "1                           0.763152  0.236848\n",
      "2                           0.789384  0.210616\n",
      "3                           0.735849  0.264151\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x9a132b0>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x97434e0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print \"Distribution of marriage and credit default.\"\n",
    "print (pd.crosstab(credit_data['MARRIAGE'], \n",
    "                              credit_data['default payment next month'])\n",
    "       .apply(lambda r: r/r.sum(), axis=1))\n",
    "\n",
    "(pd.crosstab(credit_data['MARRIAGE'], \n",
    "                              credit_data['default payment next month'])\n",
    "       .apply(lambda r: r/r.sum(), axis=1)\n",
    " .plot.bar(stacked= True))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploratory analysis with numeric variables. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['LIMIT_BAL',\n",
       " 'AGE',\n",
       " 'BILL_AMT1',\n",
       " 'BILL_AMT2',\n",
       " 'BILL_AMT3',\n",
       " 'BILL_AMT4',\n",
       " 'BILL_AMT5',\n",
       " 'BILL_AMT6',\n",
       " 'PAY_AMT1',\n",
       " 'PAY_AMT2',\n",
       " 'PAY_AMT3',\n",
       " 'PAY_AMT4',\n",
       " 'PAY_AMT5',\n",
       " 'PAY_AMT6']"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "factorVars = ['SEX', 'EDUCATION', 'MARRIAGE', 'PAY_0', 'PAY_2', 'PAY_3','PAY_4', 'PAY_5','PAY_6']\n",
    "response = 'default payment next month'\n",
    "factorVars.append(response)\n",
    "allCols = list(credit_data.columns.values)\n",
    "numericVars = list()\n",
    "\n",
    "for eachvar in allCols:\n",
    "    if eachvar not in factorVars:\n",
    "        numericVars.append(eachvar)\n",
    "        \n",
    "numericVars"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "default payment next month\n",
      "                                           AGE\n",
      "default payment next month                    \n",
      "0                          count  22996.000000\n",
      "                           mean      35.392851\n",
      "                           std        9.069673\n",
      "                           min       21.000000\n",
      "                           25%       28.000000\n",
      "                           50%       34.000000\n",
      "                           75%       41.000000\n",
      "                           max       79.000000\n",
      "1                          count   6605.000000\n",
      "                           mean      35.712036\n",
      "                           std        9.693160\n",
      "                           min       21.000000\n",
      "                           25%       28.000000\n",
      "                           50%       34.000000\n",
      "                           75%       42.000000\n",
      "                           max       75.000000\n"
     ]
    }
   ],
   "source": [
    "print response\n",
    "print credit_data[['AGE', response]].groupby(response).describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Axes(0.1,0.15;0.8x0.75)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nXZQ5ARMAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x9ce96d8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print credit_data[['AGE', response]].boxplot(by = response)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Axes(0.1,0.15;0.8x0.75)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n+P8spx60d+srQgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x9bf76a0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print credit_data[['LIMIT_BAL', response]].boxplot(by = response)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice how the scales for these 2 measurements are vastly different.  To get rid of this we need to variable standardization. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LIMIT_BAL</th>\n",
       "      <th>AGE</th>\n",
       "      <th>BILL_AMT1</th>\n",
       "      <th>BILL_AMT2</th>\n",
       "      <th>BILL_AMT3</th>\n",
       "      <th>BILL_AMT4</th>\n",
       "      <th>BILL_AMT5</th>\n",
       "      <th>BILL_AMT6</th>\n",
       "      <th>PAY_AMT1</th>\n",
       "      <th>PAY_AMT2</th>\n",
       "      <th>PAY_AMT3</th>\n",
       "      <th>PAY_AMT4</th>\n",
       "      <th>PAY_AMT5</th>\n",
       "      <th>PAY_AMT6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.960100e+04</td>\n",
       "      <td>2.960100e+04</td>\n",
       "      <td>2.960100e+04</td>\n",
       "      <td>2.960100e+04</td>\n",
       "      <td>2.960100e+04</td>\n",
       "      <td>2.960100e+04</td>\n",
       "      <td>2.960100e+04</td>\n",
       "      <td>2.960100e+04</td>\n",
       "      <td>2.960100e+04</td>\n",
       "      <td>2.960100e+04</td>\n",
       "      <td>2.960100e+04</td>\n",
       "      <td>2.960100e+04</td>\n",
       "      <td>2.960100e+04</td>\n",
       "      <td>2.960100e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.598185e-17</td>\n",
       "      <td>3.713721e-16</td>\n",
       "      <td>2.787932e-16</td>\n",
       "      <td>-3.226543e-16</td>\n",
       "      <td>-7.805017e-16</td>\n",
       "      <td>-2.131491e-16</td>\n",
       "      <td>-1.030278e-16</td>\n",
       "      <td>-1.143941e-18</td>\n",
       "      <td>4.473466e-16</td>\n",
       "      <td>1.669123e-17</td>\n",
       "      <td>-2.145629e-15</td>\n",
       "      <td>-2.221684e-17</td>\n",
       "      <td>2.416885e-16</td>\n",
       "      <td>1.450152e-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.000017e+00</td>\n",
       "      <td>1.000017e+00</td>\n",
       "      <td>1.000017e+00</td>\n",
       "      <td>1.000017e+00</td>\n",
       "      <td>1.000017e+00</td>\n",
       "      <td>1.000017e+00</td>\n",
       "      <td>1.000017e+00</td>\n",
       "      <td>1.000017e+00</td>\n",
       "      <td>1.000017e+00</td>\n",
       "      <td>1.000017e+00</td>\n",
       "      <td>1.000017e+00</td>\n",
       "      <td>1.000017e+00</td>\n",
       "      <td>1.000017e+00</td>\n",
       "      <td>1.000017e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-1.212470e+00</td>\n",
       "      <td>-1.569948e+00</td>\n",
       "      <td>-2.951348e+00</td>\n",
       "      <td>-1.673922e+00</td>\n",
       "      <td>-2.952245e+00</td>\n",
       "      <td>-3.319909e+00</td>\n",
       "      <td>-2.002849e+00</td>\n",
       "      <td>-6.358678e+00</td>\n",
       "      <td>-3.409926e-01</td>\n",
       "      <td>-2.553094e-01</td>\n",
       "      <td>-2.956902e-01</td>\n",
       "      <td>-3.073466e-01</td>\n",
       "      <td>-3.145530e-01</td>\n",
       "      <td>-2.934438e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-9.046398e-01</td>\n",
       "      <td>-8.101597e-01</td>\n",
       "      <td>-6.464505e-01</td>\n",
       "      <td>-6.482005e-01</td>\n",
       "      <td>-6.387364e-01</td>\n",
       "      <td>-6.354601e-01</td>\n",
       "      <td>-6.335521e-01</td>\n",
       "      <td>-6.314038e-01</td>\n",
       "      <td>-2.806352e-01</td>\n",
       "      <td>-2.195778e-01</td>\n",
       "      <td>-2.735067e-01</td>\n",
       "      <td>-2.883788e-01</td>\n",
       "      <td>-2.975626e-01</td>\n",
       "      <td>-2.856282e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>-2.120221e-01</td>\n",
       "      <td>-1.589122e-01</td>\n",
       "      <td>-3.911520e-01</td>\n",
       "      <td>-3.932754e-01</td>\n",
       "      <td>-3.872562e-01</td>\n",
       "      <td>-3.756903e-01</td>\n",
       "      <td>-3.648296e-01</td>\n",
       "      <td>-3.652698e-01</td>\n",
       "      <td>-2.142421e-01</td>\n",
       "      <td>-1.683841e-01</td>\n",
       "      <td>-1.933047e-01</td>\n",
       "      <td>-2.118709e-01</td>\n",
       "      <td>-2.161533e-01</td>\n",
       "      <td>-2.084915e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>5.575530e-01</td>\n",
       "      <td>6.008765e-01</td>\n",
       "      <td>2.135175e-01</td>\n",
       "      <td>2.052205e-01</td>\n",
       "      <td>1.884590e-01</td>\n",
       "      <td>1.736645e-01</td>\n",
       "      <td>1.620548e-01</td>\n",
       "      <td>1.724251e-01</td>\n",
       "      <td>-3.890397e-02</td>\n",
       "      <td>-3.875421e-02</td>\n",
       "      <td>-3.972647e-02</td>\n",
       "      <td>-5.185348e-02</td>\n",
       "      <td>-4.939876e-02</td>\n",
       "      <td>-6.690428e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>6.406324e+00</td>\n",
       "      <td>4.725444e+00</td>\n",
       "      <td>1.245149e+01</td>\n",
       "      <td>1.318319e+01</td>\n",
       "      <td>2.339731e+01</td>\n",
       "      <td>1.321691e+01</td>\n",
       "      <td>1.461219e+01</td>\n",
       "      <td>1.550442e+01</td>\n",
       "      <td>5.238431e+01</td>\n",
       "      <td>7.269169e+01</td>\n",
       "      <td>5.067180e+01</td>\n",
       "      <td>3.921962e+01</td>\n",
       "      <td>2.766564e+01</td>\n",
       "      <td>2.964749e+01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          LIMIT_BAL           AGE     BILL_AMT1     BILL_AMT2     BILL_AMT3  \\\n",
       "count  2.960100e+04  2.960100e+04  2.960100e+04  2.960100e+04  2.960100e+04   \n",
       "mean   5.598185e-17  3.713721e-16  2.787932e-16 -3.226543e-16 -7.805017e-16   \n",
       "std    1.000017e+00  1.000017e+00  1.000017e+00  1.000017e+00  1.000017e+00   \n",
       "min   -1.212470e+00 -1.569948e+00 -2.951348e+00 -1.673922e+00 -2.952245e+00   \n",
       "25%   -9.046398e-01 -8.101597e-01 -6.464505e-01 -6.482005e-01 -6.387364e-01   \n",
       "50%   -2.120221e-01 -1.589122e-01 -3.911520e-01 -3.932754e-01 -3.872562e-01   \n",
       "75%    5.575530e-01  6.008765e-01  2.135175e-01  2.052205e-01  1.884590e-01   \n",
       "max    6.406324e+00  4.725444e+00  1.245149e+01  1.318319e+01  2.339731e+01   \n",
       "\n",
       "          BILL_AMT4     BILL_AMT5     BILL_AMT6      PAY_AMT1      PAY_AMT2  \\\n",
       "count  2.960100e+04  2.960100e+04  2.960100e+04  2.960100e+04  2.960100e+04   \n",
       "mean  -2.131491e-16 -1.030278e-16 -1.143941e-18  4.473466e-16  1.669123e-17   \n",
       "std    1.000017e+00  1.000017e+00  1.000017e+00  1.000017e+00  1.000017e+00   \n",
       "min   -3.319909e+00 -2.002849e+00 -6.358678e+00 -3.409926e-01 -2.553094e-01   \n",
       "25%   -6.354601e-01 -6.335521e-01 -6.314038e-01 -2.806352e-01 -2.195778e-01   \n",
       "50%   -3.756903e-01 -3.648296e-01 -3.652698e-01 -2.142421e-01 -1.683841e-01   \n",
       "75%    1.736645e-01  1.620548e-01  1.724251e-01 -3.890397e-02 -3.875421e-02   \n",
       "max    1.321691e+01  1.461219e+01  1.550442e+01  5.238431e+01  7.269169e+01   \n",
       "\n",
       "           PAY_AMT3      PAY_AMT4      PAY_AMT5      PAY_AMT6  \n",
       "count  2.960100e+04  2.960100e+04  2.960100e+04  2.960100e+04  \n",
       "mean  -2.145629e-15 -2.221684e-17  2.416885e-16  1.450152e-16  \n",
       "std    1.000017e+00  1.000017e+00  1.000017e+00  1.000017e+00  \n",
       "min   -2.956902e-01 -3.073466e-01 -3.145530e-01 -2.934438e-01  \n",
       "25%   -2.735067e-01 -2.883788e-01 -2.975626e-01 -2.856282e-01  \n",
       "50%   -1.933047e-01 -2.118709e-01 -2.161533e-01 -2.084915e-01  \n",
       "75%   -3.972647e-02 -5.185348e-02 -4.939876e-02 -6.690428e-02  \n",
       "max    5.067180e+01  3.921962e+01  2.766564e+01  2.964749e+01  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Variable standardization for all numerical variables. \n",
    "credit_data_std = credit_data[numericVars].apply(lambda x: (x - np.mean(x) )/ np.std(x))\n",
    "credit_data_std.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# add the response column to this. \n",
    "credit_data_std[response] = credit_data[response]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Axes(0.1,0.15;0.8x0.75)"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xcce16d8>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXoAAAEaCAYAAAAfVJzKAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAHylJREFUeJzt3Xu8HHWZ5/HP9xBDggiHACaMrJysioyKHkERhwhHHUd0\nlLt4G8lxWNfdlQUGdbxPgu6OoPuaDYi6M7MYUFYFxLAQuSqnCRcxEEgIEhCU420NjBIggMRAnv2j\nfp1Umu5z7e7q6v6+X69+narqqvo91ed3nvPrp6uqFRGYmVn36is6ADMzay0nejOzLudEb2bW5Zzo\nzcy6nBO9mVmXc6I3M+tyTvRTJOkZSbdLWi3pNkkHt6CNjeM8v4+k9za73VaTtFDSV+osXyTptCa1\nsVTSMeOs81JJd0haJWn+FNrYGm86pnlTjbdIkl4l6W1taOdTrW5jrDbT38vadsfQCZzop+6JiDgg\nIgaBTwNntKCN8S5ymA+8bzoNSCqqD3TCBRxHARdHxIER8cA09zUMvGD6IRViEHh7G9r5dBvaGK/N\nTuh3bedEP3XKTe8KPLz1CenLktZKWiPp+LTsKEk/TNN7SbpX0vPTSPBSSSNp2T/UbWz7fb4rLf4i\nsCC9szilZn1J+pqkuyVdLekH1RGupAcknSHpNuC4NKL7cXp3comkXdN6I5IOSNO7S3ogTTeMWdL7\nJf0kxfR1SUrLP5jWvQU4ZIzXdVDSzWndE9O250s6ItfGBZLeWec1OkfSOknXAM/PLT9AUkXSrZKu\nlDQ3jWBPBf6zpB+l9ZalddZK+g+57Tfmpo+VtLSm3WOB1wAXpOPeseb5EUlL0ruHOyW9Ji1/bTrW\nVZJulPSStPx6Sa/MbX+DpP3TO4jzJK1Iv8OjJZ2Z9nmFpB0aHW8ujjPS7+ceSYdIeg7weeD4FPu7\namJfmPrElel3cmbuubek+G+TdKGknSTtkvZdPZZvSzpR0heB2amNb9X53W2U9CVJd0m6Jr02I5Lu\nl/SOtM6Okr6RjneVpKEGMZ6Rltdrc4akf0ntXFX7u+paEeHHFB7A08DtwDpgA/DqtPwY4Oo0/Xzg\nl8DcNP9N4CPA5cDxadlC4LdAPzALWAsckJ57LP08tt4+gcOAyxrEdyywPE3PJftHdEyafwD4WG7d\nNcCCNH068E9peiQXy+7AL8aKGdgPuAzYIa33VeBvgHkp5jnADOBG4Ow6MS8C7gBmpvZ+lbY9FFiW\n1tkF+DnQV7Pt0bnXaK/0OzkmtXcTsHt67njg3Fx7p+X20Z9+Vo9pt/zvIfe6fqN2+/RavbrB72IE\n+Oc0/QZgbZreuXocwJuB76XpDwD/M03vC6zMtbeCbID2SuAJ4K/Sc98HjhjneEeAL6fptwHX5n6f\nz/p95J67P8W6IzBK9s5ld+B6YHZa7++Bz6XpvwRuBt4NXJHb12P12kjPbak5lqtyx3lHWn4a8L/T\n9EvJ+tTMRjHW+d3tA2wG9k/zFwLvKzqXtOMxA5uqJyOiOto9GPgW8ApgAfAdgIh4SFIFeC2wHDgZ\nuAv4cURclNvXtRHxSNrX99M+bs89f0iDfY5Vw18AXJy2eVDSSM3zF6b2dgF2jYgb0/LzgYsYXz7m\nS1J7zwAHAremkfws4EHgdcBIRDyc1r8QeEmD/f7fiPgT8AdJ1wEHRcRlkr4qaXfgOOCSiNhSs92h\nbHuNfpe2hSwhvAK4NsXUB/y/Bm2fKumoNL13inEl2797G8tY61Vju0HS89LrvgvwzTT6Ddj69/g9\n4HOSPgZ8EDgvt58rI2KLslpzX0Rck5avBQYmcLzfTz9XkSW+ifhRRDwOIOmnabvdgJcBN6V2ngP8\nOB3jD9M7g68C+0+wjU01x/JU7jircS4Azk5t3CtplOwfYW2Md6dtflunnV9ERLVOv4rsNet6TvRN\nEBG3SNpD0h51ns7/8f87spHL3NpdjDM/1j6n6okJrPM028p7s2qey8eo3Px5EfGZ/IqSjmTiMTfa\n7zfJRrrvIauHT5SAuyJirHIRkg4D3gS8LiI2pX+M1WPOx1T7OkxUvd/xF4DrIuIYSfuQjbiJiD9K\nupbsM4R3kf3zrNqU1glJm3PLt5D9PY93vJvSz2eY+N//ptx0vp1rIuL9tSunxP/nZH1sd+B31afG\naKP2WPLH2SjO/P7yMeaPrbbN2vWm+vssFdfop25rB5K0H9lr+QfgBuDdkvok7Un2Vn1l6qznkiWq\ndZI+mtvXWyT1S5pN9sd9Y00bdfdJNqJ/XoP4bgKOVWYuMFRvpYh4DNggqZoYPkD2lhyyt8CvSdPv\nqtm0NuabgOvIav57ptdlN0kvBH4CHJrmn1NnX3lHSpqZRu+HAbem5eeT1dQjIu6ps90Ktr1GewFv\nTMvvBfZM77qQNEPSy+psvyuwISX5/YD8WVTrlZ2h00dWIqpnI9kIvZF3p/YXAI9GxMbUZnXU+cGa\n9c8lG72ujIhHG+yzXuKc6PHmtx8v9npuAQ6R9KLUzk7VujxZieVushMFlip9dgD8KTfdKJaxnrsB\neH9qb1+ygdO948RZ22YzBkml4xH91M2SdDvbOs4JkRX+lqU/sjVkI5OPp3LL54AVEXGzpDvJkv/y\ntO1KsrfULwC+FRF3pOUBEBGN9vkwsEXSHWQj6bNy8V1CNkL9KfBrsrepj+b3m7MQ+OeUtH/BtqTz\nP4CLJH0I+EHNNrUx3w4g6bPANSkp/gn4SESslLSYLDlsAFaP8breCVTIRoKfj4j16TV4SNI6YFm9\njdJrVD3eX5HViImIzZKOA76i7EPmHYAlZIko7yrgP6XSxL2kMkTyqXT8DwG3kdWCa50H/C9JTwKv\nj4hNNc8/lfrLDLa9vl8Czk+v2Xavb0TcLukxti/bPOuwn7Vg7ONt9M5xBPhkiu+LEXHxeG1GxO8l\nDQPfSR9oBvDZNJr/W+C1EfGkpOuBz5J99vOvwFpJqyLiA+MdS53nvgZ8Pf39bAYWpuNttD7Av1Tb\nTHH05Fk3Sh9KWEEkLQQOjIiTW7Dv50bEE5LmkI2qD4mIh5qw35bFPEabO5H9ozsgjYZLI5WBPlr9\nZzjBbf6MrKyzX+sis17h0k13W55G+yvIRsfTTvJFkPRmshHp2c1I8spOPXw4lZHyy18j6fL03MPK\nTsH7gradbrpQ0tOSHkuPjenneBdKTWo0JekDZO8oijjv3LqQR/TWU9KHnj8HHgE+HBGXpOV/AVxN\n9gHp0oj4N0l7AyeSnTG0Ir2TOTEiDi0ofLMpcaK3npI+K/krslLWSyPinWn5DcCqiDh1jG2d6K2U\nXLqxXnMCcAHwbeCtkvZM9f/Xs+0cc7Ou4kRvPSOd2vhC4KL0wej9ZKcA7kb2t7A+t+6ZkjZIelxS\nvlb++lwNf4Ok+9p5DGZT4URvveQEsot8NqT575CdWrqB7LTVvaorRsQnImI3stM586ch/zgi5qTH\nbhHR6Apfs47h8+itJ0iaRXbflz5J1Ss1dyS7aOnFZOf4H8O2i8XMuoYTvfWKo8lu6fAqtr/c/iKy\nkf7fA1dL+i3bn3UzH8iXZ3ryykorN5durFecQHbXyd9GxEPVB9mNt95HNqJ/E9ltF+5NVx1fQXbV\naP5LUg6ucx79gZh1sKacXqnsLnKPktU5N0fEQdPeqZmZNUWzSjdbgKHch1xmZtYhmlW6qd732szM\nOkyzknOQfdHBrelOh2Zm1iGaVbo5JH2rz55kCX9d7huLzMysQE1J9BHxu/Tz3yQtAw5i25dnACDJ\nN9UxM2uxiHjWKcDTTvTpPiF9EfG4pOeS3TDq9AYBTLc5q7F48WIWL15cdBhmE+Y+2zp1voQFaM6I\nfi7ZtypVv9z4/+S+5NfMzAo27UQfEQ8Ag02IxaZgdHS06BDMJsV9tv18SmTJDQ76f6yVi/ts+7Xt\ni0ckhWv0zVepVBgaGio6DDPrAJLqfhjrEX3JVSqVokMwsw7nRF9yrnda2Xhw0n6+TXEJVSqVrX8s\n559/PgMDAwAMDQ25jGNmz+Iafcn5nGQzq3KN3sysRznRl1x/f3/RIZhNimv07edEX3I+J9nMxuMa\nvZlZl3CN3sysRznRl5zrnVY27rPt50RvZtblXKM3M+sSrtGbmfUoJ/qSO+mkk4oOwWxSlixZUnQI\nPceJvuRuvNHfwW7lsnr16qJD6DlO9CXnK2OtbKo34bP28d0rS2jJkiVceumlAFx//fVb71h51FFH\nceqppxYYmVl9+Tuunn766VuX+46r7eGzbkpu3rx5rF+/vugwzCZseHiY8847r+gwupLPujEz61Eu\n3ZRQ/m3wgw8+uPV+9H4bbGXw6KOPFh1Cz2la6UZSH3Ab8JuIOKLO8y7dtMDQ0JAvKbdSGRgY8Fdg\ntkg7SjenAHc3cX82AY888kjRIZhNylNPPVV0CD2nKaUbSXsDbwf+O3BaM/ZpjeVLN2vWrHHpxjre\nSSedxPLly4Gs3Fg9xfId73gH55xzToGR9YamlG4kXUyW5HcFPurSTfscfvjhXHXVVUWHYTZhPlOs\ndVpWupH018CDEbEaUHpYm9xzzz1Fh2A2KS7dtF8zSjeHAEdIejswG3iepG9GxAm1Kw4PD299y9bf\n38/g4ODWUkO1FOH5yc3PmDGjo+LxvOfHm583b15HxVPm+er0eB9uN/WCKUmH4dJNy9VeGXvYYYcB\nvjLWOlel5srYRYsWAf5cqdkalW6c6Etu1qxZfitspbJ48eKtJxBYczVK9E29YCoirgeub+Y+zcxs\nenwLhBI66aSTGBgYYGBggE2bNm2d9r3prQzWrFlTdAg9xzc1K7n0Vq3oMMwmbHBw0PekbxHf1MzM\nOoK/Q6H9nOhLaN68eUhCyv5xV6fnzZtXcGRm9S1ZsmTrGTbV71AYGhry1wq2iUs3JefSjZXNHnvs\nwe9///uiw+hKLt2YWUd47LHHig6h5zjRm1lb7bzzzkWH0HOc6Eto5syZdWv0M2fOLDgys/rypwRv\n2LDBpwS3mWv0JecavZXNzjvvzOOPP150GF3JNXozsx7l74wtoaOPPpqRkZGt89Xzkt/4xjeybNmy\nosIyayh/U7MnnnjCX5bTZi7dlJxLN1Y2M2bM4Omnny46jK7k0o2ZdQQPTNrPib6EZs+eXfesm9mz\nZxccmVl9CxYsYNasWcyaNYstW7ZsnV6wYEHRofUEl25KzqUbKxv32dZx6cbMrEc50ZuZdTkn+hKq\n1uRra/TVebNOM3/+fPr6+ujry1JOdXr+/PkFR9YbXKMvOdc7rWzcZ1vHNXozsx7lRF9CLt1Y2eRP\nrwR8emWbuXRTcn4bbGXjPts6jUo3077XjaQdgRXAzLS/70XE6dPdr5mZNUdTRvSSdoqIJyXtANwE\nnBwRK2vW8Yi+BTw6srJxn22dln4YGxFPpskdyUb1/i22kGv0VjZz5syp22fnzJlTcGS9oSm3KZbU\nB6wCXgR8NSJubcZ+rb78aMijIyuDhx9+eOu0+2z7NWtEvyUiXg3sDbxO0suasV8zM5u+pn7xSEQ8\nJmkEOBy4u/b54eFhBgYGgOzLMgYHB7d+6UD1Swk8P/58bYkmP18dKXVSvJ73/Jw5c9iwYQNV1T47\nd+5c1q9fX3h8ZZ2vTo+OjjKWaX8YK2kPYHNEPCppNnA1cEZEXFGznj+MbQG/DbaycZ9tnZadXgns\nBZyf6vR9wIW1Sd7MzIrjC6ZKaKyza/waW6eY6llg7sNT53vddJGI2PqoN2/WCfL9Mv9YtKj+cvfh\n1vGIvuRc77SykSpEDBUdRlfyiN7MrEd5RF9CrtFbmUngbtoarTzrxtrMV8aa2WS4dGNmbVYpOoCe\n4xF9SYxVrnEpx8pk4cKiI+g9rtGXnOudZlbls27MzHqUE33pVYoOwGxS8jfksvZwoi851zvNbDyu\n0ZuZdQnX6M2sIyxeXHQEvceJvuRc77SyOf30StEh9BwnejOzLucavZm1la/9aB3X6LuU651mNh6P\n6EvO9/a2snGfbR2P6M2sI/jaj/bziL7kXO80syqP6M3MepQTfelVig7AbFJ87Uf7TTvRS9pb0nWS\nfippraSTmxGYTYzrnWY2nmnX6CXNA+ZFxGpJOwOrgCMj4p6a9VyjNzNroZbV6CNifUSsTtOPA+uA\nF0x3v2bWnXztR/s1tUYvaQAYBH7SzP1aY653Wtn4Xjft17TvjE1lm+8Bp6SR/bMMDw8zMDAAQH9/\nP4ODgwwNDQHbEpbnJzdf1SnxeN7znm/v33+lUmF0dJSxNOU8ekkzgOXAlRFxVoN1XKM3M1/70UKt\nPo/+G8DdjZK8tY7rnWY2nmacdXMIsAJYC0R6fDoirqpZzyP6FvB9Q6xs3Gdbp9GIfto1+oi4Cdhh\nuvsxs97gaz/az/e6KTnXO82syve6MTPrUU70pVcpOgCzScmfGmjt4URfcq53mtl4XKM3M+sSrtGb\nWUfwtR/t50Rfcq53Wtn4Xjft50RvZtblXKM3s7bytR+t4xp9l3K908zG4xF9yfm+IVY27rOt4xG9\nmXUEX/vRfh7Rl5zrnWZW5RG9mVmPcqIvvUrRAZhNiq/9aD8n+pJzvdPMxuMavZlZl3CN3sw6gq/9\naD8n+pJzvdPKxve6aT8nejOzLucavZm1la/9aB3X6LuU651mNp6mjOglnQu8A3gwIl7ZYB2P6FvA\n9w2xsnGfbZ1Wj+iXAm9t0r7MrIv52o/2a1qNXtI+wOUe0beX651mVuUavZlZj5rRzsaGh4cZGBgA\noL+/n8HBQYaGhoBt54N7fnLzmaGOicfznh9vPt93OyGeMs9Xp0dHRxmLSzclNzxc4bzzhooOw2zC\nKpXK1oRlzdWodNPMRD9Aluj3b/C8E72ZWQu1tEYv6dvAzcC+kn4l6YPN2K+ZdR9f+9F+vjK25Pw2\n2MrG59G3js+6MTPrUR7Rm1lb+dqP1vGIvku53mlm4/GIvuRc77SycZ9tHY/ozazp5szJSjGTecDk\nt5kzp9jjLDuP6EvO9U4rUrv6n/v5xHhEb2bWo5zoS69SdABmk5K/T4u1hxN9B3G908xawTX6DuJ6\np5WN+2xncY3ezKxHOdGXnOudVjbus+3nRG9m1uVco+8grnda2bjPdhbX6M3MepQTfcm53mll4z7b\nfk70ZmZdzjX6DuJ6p5WN+2xncY3ezKxHOdGXnOudVjbus+3nRG9m1uVco+8grnda2bjPdpaW1ugl\nHS7pHkk/k/SJZuzTzMyaY9qJXlIfcA7wVuDlwHsl7Tfd/drEuN5pZeM+237NGNEfBNwXEb+MiM3A\nd4Ejm7BfMzNrgmYk+hcAv87N/yYtszYYGhoqOgSzSXGfbb8Z7WxseHiYgYEBAPr7+xkcHNz6S6++\nnev1eeiseDzv+bHm29VfoUKlUvzxdtp8dXp0dJSxTPusG0kHA4sj4vA0/0kgIuLMmvV81s04pnJm\nQaVSyf0xtK4ds3rcZztLK8+6uRV4saR9JM0E3gNc1oT9mplZEzTlPHpJhwNnkf3jODcizqizjkf0\n4/A5yVY27rOdpdGI3hdMdRD/0VjZuM92Ft/UrAQCZT16Eo/KJNdHytoxawL32XJwou8gIrJhy2Qe\nIyOT3kZ4aGTN4T5bDi7ddBC/DbaycZ/tLC7dmJn1KCf6kstfOGFWBu6z7edEb2bW5Vyj7yCud1rZ\nuM92Ftfozcx6lBN9ybneaWXjPtt+TvRmZl3ONfoO4nqnlY37bGdxjd7MrEc50Zec651WNu6z7edE\nb2bW5Vyj7yCud1rZuM92Ftfozcx6lBN9ybneaWXjPtt+TvRmZl3ONfoO4nqnlY37bGdxjd7MrEc5\n0XeYyX+dZmXS2+y2W9FHad3EfbbzTSvRSzpO0l2SnpF0QLOC6lWT/erN6lvZyW7z8MPFHqd1D/fZ\ncpjuiH4tcDRwfRNisSkZKjoAs0kaKjqAnjNjOhtHxL0Akp5V/Dczs87gGn3pVYoOwGySKkUH0HPG\nHdFLuhaYm18EBPCZiLi8VYGZmVlzjJvoI+ItzWpseHiYgYEBAPr7+xkcHGRoaAjYdrWc5yc3v2hR\nZ8Xjec+PN79o0VBHxVPm+er06OgoY2nKBVOSRoCPRcSqMdbxBVNmZi3UkgumJB0l6dfAwcBySVdO\nZ382efn/7GZl4D7bftM96+ZS4NImxWJmZi3ge92YmXUJ3+vGzKxHOdGX3PBwpegQzCbFfbb9XLop\nOalCxFDRYZhNmPts6zQq3TjRl5zv021l4z7bOq7Rm5n1KCf60qsUHYDZJFWKDqDnONGbmXU5J/qS\nq97rxqws3Gfbzx/Gmpl1CX8Y26V83xArG/fZ9nOiNzPrci7dmJl1CZduzMx61LRuU2ztM9XvX/e7\nKCuK+2zn8Ii+JCKi7mNkZKThc/6DsSK5z3YO1+jNzLqEa/RmZj3Kib7kfE6ylY37bPs50ZuZdTnX\n6M3MuoRr9GZmPWpaiV7SlyStk7Ra0iWSdmlWYDYxrnda2bjPtt90R/TXAC+PiEHgPuBT0w/JJmP1\n6tVFh2A2Ke6z7TetRB8RP4yILWn2FmDv6Ydkk/HII48UHYLZpLjPtl8za/R/C1zZxP2ZmVkTjHuv\nG0nXAnPzi4AAPhMRl6d1PgNsjohvtyRKa2h0dLToEMwmxX22/aZ9eqWkYeBDwJsiYtMY6/ncSjOz\nFqt3euW07l4p6XDg48ChYyX5Ro2bmVnrTWtEL+k+YCbwh7Toloj4L80IzMzMmqNtV8aamVkxfGVs\niUk6XNI9kn4m6RNFx2M2FknnSnpQ0p1Fx9JrnOhLSlIfcA7wVuDlwHsl7VdsVGZjWkrWX63NnOjL\n6yDgvoj4ZURsBr4LHFlwTGYNRcSNwIai4+hFTvTl9QLg17n536RlZmbbcaI3M+tyTvTl9Vvghbn5\nvdMyM7PtONGX163AiyXtI2km8B7gsoJjMhuP0sPayIm+pCLiGeAksltF/xT4bkSsKzYqs8YkfRu4\nGdhX0q8kfbDomHqFL5gyM+tyHtGbmXU5J3ozsy7nRG9m1uWc6M3MupwTvZlZl3OiNzPrck70PSRd\nXPVHSbc3eH6RpNPG2ccekm6RtErSIVOIYaGkr6TpI8t6x830Wr63De2cImlWq9sZq01JGxusd6qk\nX0o6u33R2VQ40fee+yLigGls/5fAnRFxYETcNMV9VC/eOIrsFstlNB94XxvaORXYqQ3t1Lb53Nx8\n3YttImIJ8A9ticimxYm+x0n6jKR7Ja0AXppb/u8lXSnpVknXS9pX0quAM4GjJN0uaUdJX5O0UtJa\nSYty2z8gaU6aPlDSSE27rweOAL6U9jW/5vmlkr6e2r9H0l+n5ftIWiHptvQ4OC0/X9IRue0vkPTO\n9A5imaRrJP1C0kck/V1q82ZJ/Y2ONxfHWZJuknS/pGNSE18EFqT9nFIT+2GSRiRdLGmdpG/lnjtA\nUiW1c6WkuZJ2SK/hoWmdf5T0BUn/FfgzYETSj+r87h5I696Rtn+1pKsk3Sfpw7n1vpx+P2skHT9W\njLk2r8u1KUn/TdLq9JrtWa8vWQeLCD965AHsQzYar84fAKwBdgSeB9wHnJae+yHwojR9EPCjNL0Q\nODu3j/70sw8YAV6R5n8BzEnTBwLX1W5P9kUUxzSIdSlwRZp+MdktmWcCs4CZueW3pulDgWVpehfg\n5ymmhcDPyEbFewCPAB9K6/0TcPI4x7sUuDBN/znZOyKAw4DLGsR+GNl91/ciu6/LzcBfADOAm4Dd\n03rHA+em6ZeR3crizcAqYIfc67hbg3YeAP5j7lhW545zfVp+LHB1mn4+8EtgbqMY67UJbAHenqbP\nBD6de267/uBHZz5mYL3sDWTJcROwSdJlAJKeS5aYLpZUvQHVcxrs4z2SPkSWxOaRJay7aM6Nqy4C\niIj7Jf0c2A8YBc6RNAg8A7wkrbNC0lcl7Q4cB1wSEVtS+CMR8STwpKRHgOVp/2uB/SdwvJemNtZJ\nev4EY18ZEb8DkLQaGAAeBV4BXJva6QN+l/Z9t6QLUmyvi+xeRjD+TcAuzx3Lc3PH+ZSkXYBDgO+k\nNh6SVAFeC2xsEOPNddrcFBFXpOlVZOU7KxEnequnD9gQ49TyJQ0AHwUOjIjHJC0lG3EDPM220uBU\nP0zM14aV5v+ObLT6Skk7AH/MrfNN4ANkd/Iczi3fVLPP6vwWsr+B8Y43v/1E/4Hlt3kmtSPgroho\n9CH2/mSj7LkTbCPfzpaaNqvHVmu7BF4nxno2T3A961Cu0fe2FWT19h0lPQ94J0BEbAQekHRcdUVJ\nr6yz/S7A48BGSXOBt+Wee4CsZANZ+aCejWkfjbxLmReRffh5L7AraRQMnADskFv/fLIPEiMi7hlj\nv9uZxPHCtkS5kazcNRn3AnvmPleYIellafoYYDeyEtQ5aTQO8Bhjv0aNVOO8AXi3pL5UW38DsHKc\nbWvb9G2FS86JvodFxB3AhcCdwA/YPgH8DXBi+gDuLrIPTmu3v5OsLrwOuAC4Mff054GzJa0kG93X\n813g48pO1Zxf5/lfpZh+AHw4Iv4EfA0YlnQHsC/wRC6eh1IsS8c67AbLGx1v7frV+TuBLemD0FMY\nW6T4NpOVlc5MpZI7gNenctM/AidGxP3AV4Cz0rb/ClxV78PYMY4l3+YysrLOGrLPIT6eXqex9lXb\npm9xW3K+TXEPkbQPsDwi9i86lvGkMtDlEfH9SWyzE1lCOyCN0q3FJC0kK92dXHQs1phH9L3lGWBX\nNbhgqsNMagQi6c3A3WRngDjJt4GkU4FPkpV6rIN5RG9m1uU8ojcz63JO9GZmXc6J3sysyznRm5l1\nOSd6M7Mu50RvZtbl/j+zX30On7MlUAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xa13b978>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\nAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xa11b860>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print credit_data_std[['AGE', response]].boxplot(by = response), \n",
    "credit_data_std[['LIMIT_BAL', response]].boxplot(by = response)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "for eachnumvar in numericVars:\n",
    "    credit_data_std[[eachnumvar, response]].boxplot(by = response)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot scatter plots colored by payment default. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xa4f9438>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\neRGMESXEstrfUunCUlXDV2UBSzvLli0LHfOyZcsKaifKigmWc+izv1Lkq+oK4oXrCiAS+eZ7SHpe\n0i2S/oukf5F0g6SUMmXu/skyZ8THS8yJLhmW1f6WSheWqhq+KgtY2jn/A+fnnxMds8oblnPos79S\n5KvqCuKF6wpgrGScE21JXl8d9es3cv3eRL/KMYkeHBx0hw4dcoODg+Nq5/nnn3df//rX3fPPP58z\n5oEHHnAf/ehH3QMPPJAz5oYbbnCNjY3uhhtuyBkzbdo0J8lNmzbtlGOaOXOmk+RmzpyZM6a5udlJ\ncs3NzTljzjzzTCfJnXnmmTlj0um0k+TS6XTOmIaGBifJNTQ05Iypq6tzklxdXV3OmEmTJjlJbtKk\nSTljampqnCRXU1OTMyaRSDhJLpFI5Iyprq52klx1dXXOmKqqKifJVVVV5YyZP3++k+Tmz5+fM8Y5\n56ZMmeIkuSlTpuSMWbBggZPkFixYkDNm4cKFTpJbuHBhzhjLeZw7d66T5ObOnZsz5uyzz3aS3Nln\nn50zZunSpa6urs4tXbo0Z8wVV1zhampq3BVXXJEz5sILL3SS3IUXXpgz5rrrrnP19fXuuuuuyxlz\n8803u+bmZnfzzTfnjLn99tvdvHnz3O23354zxjnbZ/YrX/mKa2lpcV/5yldyxvzoRz9yq1evdj/6\n0Y9yxjz99NNu5cqV7umnn84Z093d7R5++GHX3d2dM+aRRx5xH//4x90jjzySM+a1115za9euda+9\n9lrOGItNmza5r371q27Tpk05Y/bt2+e2bNni9u3bN66+nHOur6/PvfXWW66vr29c7VjG5GvclmsW\nJV8/F4Hx8JlEvxz267DvJ/JVbkm0tWpCPlddfVXe+saTp0zOimk+/eSkVZJrrpKb1ZD5Gna+JbkW\nyS1KZb7muiaWOAXKGtNY+5PkWiV3eTLzdaL7Wiy5zw5/zRXzEcn9cZD5mitmkeQ+UZ35Oubjktxl\nkrtp+OtY2ylkTJbjt7Rjudd8Xde8fRnbsVyPvDHVJ/QVnByTqK3OGnOyJnlSjPXYqqqzx1SdOPkf\nZB+++MKsmI985CMnxVgq01iqYcw4a3rWmM+aedZJMatWrnTN1XKzGuWaq+VWfWFV6PHns26dofa5\nx6o0O954wz15zz3u2TvvdE/ec4/bsWPHmNqJsnpP3CqY+Pq5CIyXNYm2LCx8XxAErwVB8PqoXx//\n/lzDn8cJhoaGtPuVV7QgldLCqVO1IJXS7pdf1tDQUEHtvPDCC/rxT36cqRjxJUmrpA0/2aAXXnhh\nJOY73/mO9v/r/qyY3nd79Z3vfGck5lOf+pSaq6TZ10pTb8p8ba7KvH/cGWecoRZJF31Uet8fZr62\nDL8/WktLS2jc6Pm1Z5xxhlStrDEpkd3WjBkzQtuZMWPGSExDQ4NaJV39AemSSzNfW4ffP66xsTG0\nr8bGxqyYsL5Gx5x11llaLOk/NUlfnJ75unj4/eNSqZQ+IunfzZBuODfz9SPD7x9XU1OjRZI+NVe6\n5oLM10XD7x+XTCZDjyuZTI7EVFdX6zJJf3K69LmWzNfLht8/7txzzw1t59xzsz+2Z555ZuiYzjzz\nzKy2wo5/dFutra2h7bS2to7EnHbaaaH32mmnnTYSc84554SO+5xzzhmJmTt3buh1nTv3d+Xrr732\n2tC+rr322pGYZcuWhbYzeq77RRddFDqeiy66aCTm+uuvD425/vrrR2I+97nPZYqFju6revj9YV/7\n2tfUNHg0a8yNQ4P62te+lnXNLJ/Zr371q3rf0ewxnTt0VF/96ldHYjZs2KCDW36WFXPgH/8xa8v7\nZ555Rv/c/c9Z4369+3U988wzIzFbt27Vt9d+O1MNY7WkldK3/8e3tXXr1pGY7373u+rfuzdrzH17\n/kXf/e53R2Jef/11PfVwh2YvlaaukGYvlZ566K/0+uuvqxB79+7Vmv/YrmlXH1Hdsvc07eojWvOl\ndu3du3ckpqenRytvXam+m/r07ufeVd9NfVr571eqp6enoL4kqb+/Xy8/9ZSuaGjQNS0tuqKhQS8/\n+aT6h9cjWFnG5GvclmsWJV8/F4EoWZLohZKWSvrEqF8f/771FH8OOVirJuSzYcOG0BXoo38AdnV1\nhcZ0dXWNxDz33HOqr5OqpmW+r5om1ddl3j9u3759ak5JyeGChskpUnMq8/5ou3btCo3btWtXVlth\nYxrd1t69e0PbGf1D8PDhwzojKaWbM9+nm6Uzkpn3jzt06FBoX4cOHcqKCetrdMyePXs0R9IZ9Znv\nz6iX5gy/f9zAwIBmBtJpTZnvT2uSZgbKuq6Dg4OaUS01TM583zBZmlGdef+4oaGh0OMa/cPk2LFj\nmi1pynCeP6VRmj38/nHbtm0LbWfbtm0a7a233god01tvvZXVVtjxj25r69atoe2M/qH87rvvht5r\n77777kjMjh07Qse9Y8eOkZhf//rXodf117/+9UjMT37yk9C+fvKTn4zEbNy4MbSdjRs3jsT87Gc/\nCx3Pz372s5GYDRs2hMaM/iw+/fTToX09/fTTIzGPP/546Jgff/xxjWb5zD7++OOhYxrd1jPPPBMa\nMzpBtlSmsVTDsBzbiy++GBrz4osvqhDbt29XU2Miq52mxoS2b98+EuOzKs2BAwdUPzCgycP/8J7c\n2Kj6gQEdOHCgoHairN4Ttwomvn4uAlHKm0Q753ad6nU8LgiCwv6Wq2DWqgn5tLW1ha5Ab2trG4lZ\nsWJFaMyKFStGYq655hodfk86NpzDHtsnHX4v8/5x06ZNU2+/NPh25vvBt6Xe/sz7o82ZMyc0bs6c\nOVlthY1pdFvTp08PbWf69OkjMfX19XprUOrrzXzf1yu9NZh5/7iGhobQvkY/rW5oaAjta3TMjBkz\ntEvSW8P5+VuHpV3KfjJeW1ur3zjpX4d/bv7rAek3TlnXNZlMas9R6dD+zPeH9kt7jmY/ZU4kEqHH\nNbq2c1VVlXZLevtg5vu3D0q7h98/bsGCBaHtLFiwQKOdccYZoWMa/T8DCxYsCD3+0W0tXLgwtJ3R\ndXknTZoUeq9NmjRpJGbu3Lmh4x79lPnss88Ova5nn332SMzHPvax0L4+9rGPjcRceeWVoe1ceeWV\nIzEXXnhh6HguvPDCkZi2trbQmNGfxaVLl4b2tXTp0pGY5cuXh455+fLlGs3ymV2+fHnomEa39YlP\nfCI0ZvSOnZbKNJZqGJZju+SSS0JjLrnkEhVi/vz5OnBwKKudAweHNH/+/JEYn1VpmpqadLi2VvsP\nZj6Q+w8e1OHaWjU1NRXUTpTVe+JWwcTXz0UgUpY5H5aXpFd8tZWjfU8zXeLBWjUhn7ar2/LOiW4+\nvbk4c6JrTz2/OLI50R77+gPJ/dvhr7liSnpOdNX450R/SHLXVGW+5ooxz4muHv91tfRlnhOdGOec\n6EBOVXI6bfhryJzoZE3S25zo6kR13jnRH/nIR/LOibZUpmlf3Z4VEza/9qyZZ+WfE/2FVX7mRD9o\nmBPtsSrNjh07/MyJjrB6T9wqmPj6uQiMl4xzon0muRO6yLDckmjn4lWdo7OzM/MDXpkf7Dm3vZac\nUpm4sB+kzjm35PLF7jTJTZfcaZK7/IrLc7eVzN1We3t7JmY4Qcj1F3x9fb2T5Orr60N/v729PbOg\nq1FO1eHtWI5tYev7so6rtbV1TGMeiVHumKuuvirz+7WZmLB/HHV2dma1k+sHqaWixszZmWoqasq0\nNWv2rJNiRs5Rbe5ztG7dOtcsuVmSa5ZyLubKN+5169ZlznUqc67D2nHOT3WOzs7OTPJXk0n+ci3k\nUvXw+akOj1m1cmXW/RGW/N37zW9m/rE2/I+2e++796SYq66+KnP/NGTuo7BrnzXu2tzjXrdunZsc\nyJ1RJTc5yH0efVTnGPmcTcr9OXMu2uoce/bscZs3b3Z79uzJGUN1DqpzACciiYbZvn37XLop7XSr\nnNbI6Va5dFM66y/np59+OvMDe1SMEjrpB+qmTZtcc5XcBcvkFt2S+dpcpawSU5a2uru7Mwn26Jik\nCv6L3tKOZTzr168PPa7169cX1Jcl5vnnnw8dz+h/JFmumdWjjz4a2t+jjz5a0Dnas2ePm5GuyTpH\nM9I1WQmMZdyWdnyxjMcS89prr7nm6hPuj2plJYG7d+92C2oS7oaPyt10ndwNH5VbUJNwu3fvHomx\nXPs4nkdfn1cAiANrEl3wtt+nkHePccSTr22vJduCJ18LlSws7VjG89RTT4Ue11NPPVVQX5YYy4JR\nn4uinnjiidD+nnjiiZEYyznytZjL0o4vvhZyWRbEdXd3a0q6KmsB65R0lbq7u0diLNfeOqYoz2Pc\nFqkBQBQs235vyBcz7DPjHAuKxNe215JtwZOvhUoWlnYs47n++utDj2t0CTNLX5YYy4JRn4uiPvWp\nT4X2N7pcmuUc+VrMZWnHF18LuSwL4lpbW/V237GsBaxv9x3LKgFoufbWMUV5HuO2SA0AIpHvUbUm\neMGg9SWmc0woX9teO+fc5VdcnrV4KGxOtHmhkodFL5Z2LONpbW3NOq7QOdGGviwxlgWjPhdFzZo9\nK6u/sDnRlnPkazGXpR1ffC3ksiyIu/e+e92CmoT7/Uk1bkFNInROtOXaW8cU5XmM2yI1ABgr+ZoT\nLWmHpOtzvSyd+HiRRE88ywITy9a/zmXmEH/2s5/NmjN8orvuusudf/757q677soZY1mEZBm3Zdtz\nS1/333+/+/3f/313//3354yxLPS8++673QUXXODuvvvunDF33HGHW7BggbvjjjvGNR7rwqEvf/nL\nbvbs2e7LX/5yzphHH33UXXvttVnzpU9k2WrZ0s7LL7/svvWtb7mXX345Z4zl2CwxPhbnOme77y3H\n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\nNQxflVkAVCZrEm1ZWPg559y/y/H6fMGTsBEpyyp1S0xXV1dopYPR1Skkaf369aFx69evH4mxVE2w\nxDPAFqgAACAASURBVFgqVFjGY2nHUlHEMuYXX3wxtJ0XX3yxoHYs1UKs1Tmee+650Laee+65gsbk\n6/h93bMDAwOqGRxUOpWSJKVTKdUMDmpgYECFsPRlqeDh69h9jttXf3GrhuGrMgsAnEreJDoIgi+f\n6hXFIDF2llXqlpgVK1aEVjoYXZ1CkpYtWxYat2zZspEYS9UES4ylQoVlPJZ2LBVFLGO+5JJLQtu5\n5JJLCmrHUi3EWp3jmmuuCW3rmmuuKWhMvo7f1z1bW1urI8mk+vr7JUl9/f06kkyqtrZWhbD0Zang\n4evYfY7bV39xq4bhqzILAJxSvkfVkr5xitfXLY+7fbzEdI6c8i0K6uzqdLX1tS51esrV1teGz4vs\n6nSphpSrn17vUg2p0Jjm05tNc6LP/8D5+edEr253qpLTZDlV5Zhfu7rdKZBTvZyC8JhZs2c5Vcup\nUU7V4XOZR8YzOfd4Rto5LXc7IxVF6k8xJ3p1u5M08gqdE/yFVW6y5M5KyU1WjjnRx9tJ5G7HUnVk\npDpH8tRzoi+/4nLXLLlZtXLNyjEn+viYkrnHNHLNUrmv2aovrMrqK3Re8PF79sxT37PJdNIlmhIu\nmU6Gz4nu7TXNic632M/yGbJU8Fj1hVX550R3dbp0Y9rVz6p36cZTzy3Ot9Czs6vT1dbVuprJNa62\n7hSf/caUa5zd6FKN4Z995zLTYw4dOpRzOoy1GkZUW1q3r27P+nuolOZEW85Rvuth5asdoJzI15zo\nU/5h6bbx/PkC+/J8isqDeevjxPACmxw/TDo78//gbm8fTqKqcydRzjlX11iXiWnKxNY31J8Uc+83\nv+nmJarch9PVbl6iyt17370nxaTSNVmL4tJ16fC+Rv2gDOsrmU5mjaemtuakmERttWsO5GbVyTUH\ncsmaZHhfVcMJe1V4X5LcIsl9ojrzNey+leTmSO5DtZmvYTGWY588ZXImYa3LJKxh/6hpampwsyX3\n/hq52ZJrmtR0UkzWOZqc+xydM7fFtUru8qRcq+TmzZt3UoxlEefkKZOz+gob96qVKzP/QKjL/AMh\nLNm0LPR0Ln+SYF7omecz5Jyf6hydnfn/Qeuc7VxbtrPvfecd9w9PPum+/xd/4f7hySdD/6FhXaCZ\n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\nKC8vz5Gb78kTTzxBhYWF9MQTT/jUrFy5ku6++25auXKlT82KFSuooaHBkU/viU7L8+bmZlq4cKEj\nD9wTnVbluui04l66dClNmTKFli5d6lOj0z68OzXdibQzF3oDsonuQXSfaobiyW9v04T6fHUA/dA8\n+tLoPK0P1ZP4mwGaYx6v9lrXIvDT8wkA3d/FNdTV6a5jqJ7o68xfJx4dTQH8fzIABH4KrzNOalKi\nY+5p/dI6tT4dOp211vm0wv50mNNkpKcFfFofHRPpmH9MbIyX5uWXjaejSQVJPp+OFhcXBfw0IzEx\nPuAnA/N/9auAT/0ffDB0T6JPffUV7Vy3jvasWUM7162jU6dOeWly8nIcnzLk5uV6aXTWSEejQ6jG\nCRU6aygI3YFsonuI/v37s84C/ftf+aXTsfnx54bRodkF0EXz2JV23Trj6Gj8xew5VmuAsZoBagkz\njpyGaw/tqdFpe865fNg1HS3WPdfRs8U610Kbm1dXW6yHh4ezjiLh4eGWJj4+nm3VHR8fb2mioqLY\nNYyKcqZGREREsDr7k+TExER2HRMTEx0a7t63a1JSUlh3jpSUFEfc3Pztceu0Ia+trWU19ieyw4YN\nY503hg0bZml0nEl0XFd++9vfsnP/7W9/a2nq6upYTV1dneOaVVZWsmtdWVnpiIlzZ7HHdNttt7GO\nGbfddpul0XEweeaZZ9j5258S6zhG6Di86Lil6DihhNKdQ6cV99KlS1nnFfsT6VA5j+jQ2xw8pJ25\n0JvQ3URLYWGIOXbsGOsscOzYMYcukBtGh6bE/L4EXWvXrTOOjiZQzB26DnfgQX7Gut600b0+jNdw\n7aE9KUDgtuf58Hb5sENE7DoaP0fOeDxbaHPz6mqL9UuXLrGOIpcuXXH5PnfuHNuq2+7x29rayq6h\nZ3vgtrY2VtfWdsUx/OzZs+w6nj171qHh7n275vTp06w7x+nTpx1xc/O3x63ThrypqYnV2N0pdu7c\nyTpY7Ny509LoOJPouK643W527nYnjI0bN7KajRs3ws6WLVvYtd6yZYsjJs6dxR7T22+/zTpm2F1e\ndBw8dNqH6zhG6Di86Lil6DihhNKdQ6cVd2NjI3s+u+tMqJxHdOhtDh7Szlzoi8gmOsT079+fdRbo\n39/ZwCGQG0aHpqO32EfoWrtunXF0NIFi7tB9bH7/sZ+xPrlsfP/JZV7zGbzbQ3tyAIHbnnMuH3Y6\nWqx7rqNni/XP4N1Cm5tXV1ush4eHs44i4eHhliY+Pp5t1R0fH29poqKi2DX0bA8cERHB6iIiIixN\nYmIiu46JiYkODXfv2zUpKSmsO4e9WURUVBQ7f3vcOm3Ia2pqWI3dnWLYsGGsg8WwYcMsjY4ziY7r\nSkNDAzt3uxNGbW0tq6mtrYWdyspKdq0rKysdMXHuLPaYxo8fzzpm2F1edBw8dNqH6zhG6Di86Lil\n6DihhNKdQ6cV98yZM9nz2V1nQuU8okNvc/CQduZCn0TncXVv+IJH2kBvBpCcaMmJlpzoayonWsOZ\nRGectH5pfTInWsfBJCY2JnBOtIZjhI7Di45bio4TSijdOU6dOhUwnzc3LzdwTnSInEd06G0OHjpr\nKAjdgfk+GHhvqiPqDV99aRNNZFwA+PkFeC1remNMork2r1lMTAwBoJgY7w1bBxkZGQSAMjIyfGp0\n3DnGjx9P4eHhNH78eJ+aESNGEAAaMWKET819991HaWlpdN999/nUDB8+3NgkDx/uU0NElJ+fTwAo\nPz/fp6aqqooAUFVVlU/NoEGDCD42rB089dRTNHjwYHrqqad8au68806Kj4935F170tTURD//+c+p\nqanJp2bx4sU0btw4R961JzpOIDruHAsWLKCRI0c6cqo7y9GjR2njxo109OhRn5pQuXPs2bOH/vCH\nP3S5w6JOzDqEyuVD3DmE3oBsonsQnSc7gN5TTZ0ndt35JDrQUz1dXcf5Aj1F1XkaqfMEVWccHY3O\nUz2dueucS8f/OhRPfYmIIiNcAX2ZQxV3mMc44RHh7DiB5qbrdBHoCbKO80RJUaEjZs4KriAvxxHz\nwIEDvTQ6zhM3DLnB8bSybEiZl4aIaMCADMdYmVnefwDojBUTF+14v4qNi/XS6LhY6DhP6Izz4osv\nUlZMJJVkxFJWTCS9uPjFTo0TKicQXbrT6SJU5wqVG0Zvc/kQhK4im+geoqSkhK12LykpsTTx8fGs\n04PdWaFj8+NZpW9fh46N6A6AvnEZx864aiQkJLAau/duRkYG63Tg+XTP5XKxOpfrSrOQzMxM1lnC\n/hQwLy+PdWjIy8uzNBMnTmRdJSZOnGhphg0bxo5jd18oLCxkNYWFhZbmrrvuYp0O7rrrLktz++23\ns3O//fbbLc3UqVPZc02dOtXSlJeXs24I5eXllqa+vp51Z6ivr7c0Y8aMYe+hMWPGOK7Z3Llz2bHm\nzp3rWGsubvtaNzQ0sHE3NDRYmscff5wd5/HHH7c099xzDxvPPffcY2l0nC50XDV0nCdWrFjBxmx3\njHC73WzMbrfbMU4B/DtPrFq1inVw8PQwfumll9ixXnrppaDGevbZZ9n3q2effdbS6LhY6DhP6Ixz\n9OhRyoqJdMSTFRPpeEqqM06onEB06U6ni1CdK1RuGL3N5UMQQoHuJloKC0PMRx99xFa7f/TRR5am\nw1nB0+nB7qwAgK3S96QQQLF5FYtdnXPVaGlpYTUtLS2W5vjx46zTwfHjxx1jtbe3s7r29nZL88UX\nX7DOEl988YWlOXToEOvQcOjQIUuzfv161lVi/fr1lmbnzp3sOHb3hf3797Oa/fuvlPy98cYbrNPB\nG2+8YWnWrl3Lzn3t2rWW5q233mLP9dZbb1ma7du3s24I27dvtzRr1qxh3RnWrFljaTZt2sTeQ5s2\nbYKdxsZGdiy7a8D69evZuO1rvXr1ajbu1atXO87FjWM/16pVq9h4Vq1aZWl0nC50XDV0nCeWL1/O\nxmwfR2cNdZwnVq5cyTo4rFy5EnZ03DB0xnK73ez7lX3+Oi4WOs4TOuN88sknSEwId8STmBCOTz75\nJKhxQuUEokt3Ol2E6lyhcsPobS4fgtCdyCY6xJSUlLDV7iUlJZamw1nB0+nB7qwAgK3S92Q/gL3m\n/nRve+dcNRISElhNQkKCpcnIyGCdDjIyMhxjuVwuVudyXbnVMjMzWWeJzMxMS5OXl8c6NOTl5Vma\ncePGsa4S48aNszTDhg1jx7G7LxQWFrKawsIrf25MnjyZdTqYPHmypamrq2PnXldXZ2kmTJjAnmvC\nhAmWpry8nHVDKC8vtzQTJ05k3RkmTpxoaaqrq9l7qLq6GnZmzpzJjmV3DRg3bhwbt32tJ02axMY9\nadIkx7m4ceznuu2229h4brvtNkuj43Sh46qh4zwxffp0Nmb7ODprqOM8cccdd7AODnfccQfs6Lhh\n6IzV0NDAvl/Z56/jYqHjPKEzzvXXX4+zLZcc8ZxtuYTrr78+qHFC5QSiS3c6XYTqXKFyw+htLh+C\n0K3oPK7uDV/oI+kcRCQ50Rq6jvNJTnTvyImOio7qtpzo8IjwkOREazldaLhq6DhPDB48OGBO9MCB\nAwPmROs4T5QNKdPKic7MygyYE60zVmxcbOCcaA0XCx3nCZ1xXlyskROtMU6onEB06U6ni1CdK1Ru\nGL3N5UMQugo00zl6fHOs+9WbNtE6Vcg6rgFA73I6CJWmu88XERFBgLPD3tU6V2JiIgHOLnydGSch\nIYEAZ9751YonLi6OAFBcXJxPDRFRVlYWAaCsrCyfmujoaAJA0dHRPjUDBw4k+NhEdlBWVkYAqKyM\n3yASGd0/AWe3T0+GDh1KAGjo0KE+NTruFEVFRQSAioqKfGpmzZpFCQkJNGvWLJ+a2bNnU2pqKs2e\nPdun5vbbb6fY2FhHrrwnjzzyCOXk5NAjjzziU0Nk5I+npaU58sU9mTt3LhUXFzty3D257777KD09\n3a9jiI7TxQ9/+EPKyMigH/7whz41q1atonvvvdcrz9vOkiVLaNKkSbRkyRKfGh2XCx0Hi5deeokm\nTJjgyCfvzDhERLt27aIXXniBdu3a5VcXCJ3fMb3NDSNU8QhCb0A20VcJnSpk3SeEOk9QQ/UEWecJ\naih9okPl76wTk85a62hC5YGs8wmDzhPdUMUT6Np36HSefOvErfPpic65QqFJToh3zD8lNYUdJ9Aa\nxUaGOzTc09p+qcmO65Geke6lCYtQjief3FP4rOxMx5Ph7JxsLw1R6Nw5vj+21nG+sePGemn279tH\ny+fNozXPPEPL582j/fv3dypuHVcNnZjr/qnOoZnwTxO8NDrv1ToanZiJ9FxFdBCnC0HoeWQTfRXQ\nqULWcRbo2GR6ukrY59ixgdwF0EXz6Mt5YxtApyKMI6fhXCW4cfy5fCil2HMppRxrFBYWxs4tLCzM\n0hQVFdF4gN6JAu1NNo7j4XwKmJWVRRMAagaoJcw4ToDzKWllZSW71pWVlZZmyJAhrGbIkCGWpra2\nlnXVqK2ttTQ1NTXsODU1NZamrKyMdV2xP20dO3Ys6/QwduyVjUtpaSkbT2lpaVDxTJ48mb32kydP\ndlyz0aNHsw4Vo0ePdpyPi9t+vh/96EesY8aPfvQjSzN79mz2XPYntxMnTmQ1dieQqVOnshq7y8nC\nhQvZ+S9cuNAxd05jn/svfvELVvOLX/zC0ixatIi9HosWLbI0TzzxBOsGYfc5XrJkCeuW4flENlTu\nHBs2bGDPt2HDBktz4cIFWj5vHp16/nmiP/2JTj3/PC2fN48uXLgQVNw6rho6MTc1NbEau++0znu1\njkYnZiI9VxEdxOlCEHoHuptoKSwMAp0qZB1nAQCsq4QnhQA6yhFL4Nt54zqzO/N1EbyGc5XgxvHn\n8kFE7LmMe+0Kly9fZud2+fJlS7Nv3z4UAMiOMV5nxwAF5r93cPToURQCuD7MeH19mHG+o0ePWpot\nW7awa71lyxZLs2vXLlaza9cuS9PU1MS6ajQ1NVmazZs3s+Ns3rzZ0uzevZt1Xdm9e7eleffdd1mn\nh3fffdfS7Nmzh41nz549QcXz9ttvs9f+7bffhp3NmzezDhX2sTZt2sTGbXf6WLFiBeuYsWLFCkvz\n+uuvs+d6/fXXLc0777zDat555x1L89Zbb7Eau8uJ2+1m5293nti0aROrsc/rlVdeYTV2Jwy3281e\nD/u5li1bxrpBLFu2zKHh3DLsmo6YQuHO8eabb7Lne/PNNy3N2bNnEdfaihSz0DglIQFxra04e/Zs\nUHHruGroxPzWW2+xGvu113mv1tHoxAzouYroIE4XgtC3kE10EOhUIes4CwBgXSU82Q+gwxjvI/h2\n3vi0zfj+0zZew7lKcOP4c/lQSrHnUsrpuxcWFsbOLSwszNIUFRXhAIAjF4zXRy4AB8x/7yArKwv7\nAXxi7r0/uWycLysry9JUVlaya11ZWWlphgwZwmqGDBliaWpqalhXjZqaGktTVVXFjlNVVWVpysrK\nWNeVsrIySzN69GjW6WH06NGWprS0lI2ntLQ0qHjGjx/PXvvx48fDTlVVFetQYR+rurqajdvu9HHn\nnXeyjhl33nmnpZkyZQp7rilTpliasWPHspqxY8damgkTJrAau8tJQ0MDO3+780R1dTWrsc9r1qxZ\nrMbuhNHQ0MBeD/u56uvrWTeI+vp6h4Zzy7BrOmIKhTvHLbfcwp7vlltusTSJiYn4JioKp03Ly9Mt\nLfgmKgqJiYlBxa3jqqET84QJE1iN/drrvFfraHRiBvRcRXQQpwtB6GPoPK7uDV/oBekcREYVckRM\nBEUkRlBETITPnOhigIaaRy52AFQG0PfMoy/N9wGqN4++NKMAqjaPvjSDABpsHn1pamCkXvjLmx4F\n0Fg/5+rQVQJUBf95sZUw0jj8acbByEP1lxc8CKBhAeY2CKAbA2jKAbrJPPrSlJrXwl+e7hiA7jSP\nvjQVMNIhKrq4PqXmOP7iuQmg0ebR3zXLA6jIPPqLqU4jpqEBYsozfzb8navQHKfQj2ag+fMz0Icm\nJTWFRgJ0C0Aj4TsnusK8r31dj9i4WBoM0HXmzxGXE52ekW6kwZhz53KiwyPCKdOcUyb4nOjsnGxK\n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\nhBBi/r4NuDcVd44g2Lx5M1vtb3e6AIynXiXm9yXma096o6bY/L64C+N06AaZ3w/yM1ZRuPF9Ubi3\n5uzZsygEcF2E8fq6CENjdwQ4ePAgBgLIM8wOkBdtPL07ePBgUHP79ttvMRDAQLO+a2CUMc63ZgEY\nAFy+fJmd/+XLly3NiRMnWEcVuxvGtm3b2Ll7PrHj4rFz8OBBdl72uTc1NbGuK01NTY6xzp07hzwA\n/QzzBfRLMJ44njt3ztJ89dVX7Pm++uorS3PgwAHWCcbumnD69Gn2up4+fdrS7N+/HwMBFJjzLzDn\nv3//lSbZmzZtYue2adMmS9PS0sKudUtLS1DjHD58mHVLOXz4sKVZvnw5G7PdmWXLli3sOFu2bLE0\n69evZ8dZv3497OjEresClA9vhx+7E0pjYyN7fzQ2NloaHUcZt9vNauxOKDoaHRcYHQcPHYcTXScQ\nHeeVUNHU1MTO3/PnWhCEq49sooOgqqqKrfa3O10AxsfGH5nff2S+9qQ3avaa3+/twjgduo/N7z/2\nM9a+S8b3+y55axITE7EfwKdtxutP2wyN3REgPz8fnwE4ZO51D31rfPydn58f1Nyio6PxGYDPzN93\nn7Ua40SbvxABICwsjJ1/WFiYpUlPT2cdVexuGBUVFezcKyoqHDFx8djJz89n52Wfe01NDeu6UlNT\n4xgrPj4ehwCcNPeWJ1uMj+zj4+MtTVpaGnu+tLQ0S1NQUMA6wdhdE1JSUtjrav/Yu7CwEJ8BOGDO\n/4A5/8LCK3/+VFdXs3Orrq62NAkJCexaJ5hWbbrj5Obmsm4pubm5lmb69OlszHZnlsrKSnacyspK\nSzNu3Dh2nHHjxsGOTty6LkCcw4/dCWXmzJns/TFz5kxLo+Mo09DQwGrsTig6Gh0XGB0HDx2HE10n\nEB3nlVBRU1PDzt/z51oQhKtPj+ZEB0Nvy4lOB3ACvnOiqwFEAWgFsMmHZjSAFACnAbzrQzMGhm3s\nWQB/86EZjyu5ir5yUGttMW/0E08CgBY/8dTYYubyZu0x5QI4HCCmfgBO+olpjE3ja/7VAGIBnIfv\nta7DlbxQX7mqNbiy1r5ygnXGGQMgCcAZPzHX4UresL983ywAR+E737UWQH8Ax+B7DWsApAH4yse8\nOnQjcWWt3/cx1lgAmQC+gFENzGlGAYgEcBHAe10YpxbGA8Av/cxtOIBwAJfgO794tG3+vu7rKgCp\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xcc4a470>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = credit_data_std[credit_data_std[response]== 0].plot.scatter(x= 'AGE' , \n",
    "                                  y= 'LIMIT_BAL',\n",
    "                                  color='Green', \n",
    "                                  label='1')\n",
    "credit_data_std[credit_data_std[response]== 1].plot.scatter(x='AGE', \n",
    "                             y='LIMIT_BAL',\n",
    "                             color='Red', \n",
    "                            figsize = (12, 12) ,                             \n",
    "                             label='0', ax=ax, alpha = 0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['LIMIT_BAL',\n",
       " 'AGE',\n",
       " 'BILL_AMT1',\n",
       " 'BILL_AMT2',\n",
       " 'BILL_AMT3',\n",
       " 'BILL_AMT4',\n",
       " 'BILL_AMT5',\n",
       " 'BILL_AMT6',\n",
       " 'PAY_AMT1',\n",
       " 'PAY_AMT2',\n",
       " 'PAY_AMT3',\n",
       " 'PAY_AMT4',\n",
       " 'PAY_AMT5',\n",
       " 'PAY_AMT6']"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numericVars"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from pandas.tools.plotting import scatter_matrix\n",
    "colors = ['green', 'red']\n",
    "\n",
    "scatter_matrix(credit_data_std[numericVars[2:8]], \n",
    "               alpha=0.3, \n",
    "               figsize=(12, 12), \n",
    "               c = credit_data_std[response].apply(lambda x: colors[x]),\n",
    "               diagonal='kde')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "AVG_BILL_AMT = credit_data[numericVars[2:8]].apply(lambda x: np.mean(x), axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "credit_data_std['AVG_BILL_AMT']  = ( AVG_BILL_AMT - np.mean(AVG_BILL_AMT) ) / np.std(AVG_BILL_AMT)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "credit_data_std[['AVG_BILL_AMT', response]].boxplot(by = response, figsize = (8, 8))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Getting Started with machine learning! "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "credit_data = pd.read_csv(\"C:/Users/eabksar/Dropbox/OtherWork/PythonForDataScience/data/creditDefaultData.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "####  Split the original data into train, test & validate. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20720 5920\n",
      "(20720, 25)\n",
      "(5920, 25)\n",
      "(2961, 25)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Calculate the size of each partition. \n",
    "numTrain, numTest =  int(0.7 * credit_data.shape[0]), int(0.2 * credit_data.shape[0])\n",
    "print numTrain, numTest\n",
    "\n",
    "# Randomly shuffle the original dataset. \n",
    "np.random.shuffle(credit_data.values)\n",
    "\n",
    "# create the train, test & validate split using list slicing notation. \n",
    "trainData = credit_data[:numTrain]\n",
    "testData = credit_data[numTrain:(numTrain + numTest)]\n",
    "validateData = credit_data[(numTrain + numTest): ]\n",
    "\n",
    "print trainData.shape\n",
    "print testData.shape\n",
    "print validateData.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['ID', 'LIMIT_BAL', 'AGE', 'BILL_AMT1', 'BILL_AMT2', 'BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6', 'PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6']\n"
     ]
    }
   ],
   "source": [
    "# create groups of variables : response, factor variables & numeric variables. \n",
    "response = 'default payment next month'\n",
    "factorVars = ['SEX', 'EDUCATION', 'MARRIAGE', 'PAY_0', \n",
    "              'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6']\n",
    "\n",
    "allCols = list(trainData.columns.values)\n",
    "allCols\n",
    "\n",
    "# here is another to create the list of numeric variables using list comprehension. \n",
    "numericVars = []\n",
    "[numericVars.append(i) for i in allCols if i not in factorVars + [response]]\n",
    "print numericVars"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Dealing with numeric variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "List of means using the training data:  [  1.49621056e+04   1.67350564e+05   3.54418436e+01   5.11260836e+04\n",
      "   4.89986165e+04   4.68875680e+04   4.31804374e+04   4.02331394e+04\n",
      "   3.87423284e+04   5.63362307e+03   5.91165594e+03   5.15585208e+03\n",
      "   4.74415550e+03   4.76305415e+03   5.09827235e+03]\n",
      "List of standard deviations using the training data  [  8.66338200e+03   1.29518960e+05   9.20016032e+00   7.36691012e+04\n",
      "   7.10763540e+04   6.95143308e+04   6.41930457e+04   6.05238544e+04\n",
      "   5.89344166e+04   1.59664307e+04   2.34045871e+04   1.68728428e+04\n",
      "   1.48156651e+04   1.46393476e+04   1.70720221e+04]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\eabksar\\AppData\\Local\\Continuum\\Anaconda2\\lib\\site-packages\\sklearn\\utils\\validation.py:420: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n"
     ]
    }
   ],
   "source": [
    "# we saw variable standardization using pandas earlier.. here is another way to standardize the variables.\n",
    "# This method has some particular usefulness\n",
    "\n",
    "from sklearn import preprocessing\n",
    "trainX = trainData[numericVars].values\n",
    "scaler = preprocessing.StandardScaler()\n",
    "scaler.fit(trainX)\n",
    "\n",
    "print \"List of means using the training data: \", scaler.mean_\n",
    "print \"List of standard deviations using the training data \", scaler.scale_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(20720L, 15L)\n",
      "[[ 1.27604837  0.25208229  0.38674939 ...,  0.01726851 -0.32535973\n",
      "  -0.00575634]\n",
      " [ 1.09678812  1.1013788  -0.26541316 ..., -0.20445626  0.48997715\n",
      "  -0.28240781]\n",
      " [ 1.72437213 -1.13767563 -0.70018819 ..., -0.32021212 -0.32535973\n",
      "  -0.29863319]\n",
      " ..., \n",
      " [-0.8982757  -0.0567528   2.88670582 ..., -0.32021212 -0.32535973\n",
      "  -0.29863319]\n",
      " [-0.94560133 -0.82884053 -1.13496323 ..., -0.25271599 -0.2821201\n",
      "  -0.26776397]\n",
      " [-1.16803179  0.32929107 -0.59149443 ...,  0.35474914  0.69927609\n",
      "  -0.27953762]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\eabksar\\AppData\\Local\\Continuum\\Anaconda2\\lib\\site-packages\\sklearn\\utils\\validation.py:420: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n"
     ]
    }
   ],
   "source": [
    "# using scaler object get the standardized values of trainX\n",
    "trainX_std = scaler.transform(trainX)\n",
    "print trainX_std.shape\n",
    "print trainX_std"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Dealing with categorical variables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ften features are not given as continuous values but categorical. For example a person could have features [\"male\", \"female\"], [\"from Europe\", \"from US\", \"from Asia\"], [\"uses Firefox\", \"uses Chrome\", \"uses Safari\", \"uses Internet Explorer\"]. Such features can be efficiently coded as integers, for instance [\"male\", \"from US\", \"uses Internet Explorer\"] could be expressed as [0, 1, 3] while [\"female\", \"from Asia\", \"uses Chrome\"] would be [1, 2, 1].\n",
    "Such integer representation can not be used directly with scikit-learn estimators, as these expect continuous input, and would interpret the categories as being ordered, which is often not desired (i.e. the set of browsers was ordered arbitrarily).\n",
    "One possibility to convert categorical features to features that can be used with scikit-learn estimators is to use a one-of-K or one-hot encoding, which is implemented in OneHotEncoder. This estimator transforms each categorical feature with m possible values into m binary features, with only one active."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### One hot encoding using scikit learn. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   x\n",
      "0  1\n",
      "1  1\n",
      "2  2\n",
      "3  3\n",
      "4  3\n"
     ]
    }
   ],
   "source": [
    "data  = pd.DataFrame({ \"x\": [1,1 , 2, 3, 3 ]})\n",
    "print data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[{'x': '1'}, {'x': '1'}, {'x': '2'}, {'x': '3'}, {'x': '3'}]\n"
     ]
    }
   ],
   "source": [
    "dataFormat_For_OneHotEnc = (data\n",
    "# converts all values to string                            \n",
    " .applymap(str)\n",
    "# takes the transpose                            \n",
    " .T\n",
    "# converts the data frame to a dictionary. \n",
    "# id s are the keys of the elements. \n",
    " .to_dict()                        \n",
    "# extracts the values out of the dictionary                    \n",
    " .values())\n",
    "                       \n",
    "print dataFormat_For_OneHotEnc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DictVectorizer(dtype=<type 'numpy.float64'>, separator='=', sort=True,\n",
       "        sparse=False)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.feature_extraction import DictVectorizer\n",
    "dv = DictVectorizer(sparse=False)\n",
    "dv.fit(dataFormat_For_OneHotEnc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.,  0.,  0.],\n",
       "       [ 1.,  0.,  0.],\n",
       "       [ 0.,  1.,  0.],\n",
       "       [ 0.,  0.,  1.],\n",
       "       [ 0.,  0.,  1.]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dv.transform(dataFormat_For_OneHotEnc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data: \n",
      "   x1  x2\n",
      "0   1   1\n",
      "1   1   1\n",
      "2   2   2\n",
      "3   3   2\n",
      "4   3   1\n",
      "transformed Data for One hot encoding: \n",
      "[{'x2': '1', 'x1': '1'}, {'x2': '1', 'x1': '1'}, {'x2': '2', 'x1': '2'}, {'x2': '2', 'x1': '3'}, {'x2': '1', 'x1': '3'}]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[ 1.,  0.,  0.,  1.,  0.],\n",
       "       [ 1.,  0.,  0.,  1.,  0.],\n",
       "       [ 0.,  1.,  0.,  0.,  1.],\n",
       "       [ 0.,  0.,  1.,  0.,  1.],\n",
       "       [ 0.,  0.,  1.,  1.,  0.]])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data  = pd.DataFrame({ \"x1\": [1,1 , 2, 3, 3 ], \n",
    "                     \"x2\" : [1, 1, 2, 2, 1]})\n",
    "print 'Data: '\n",
    "print data\n",
    "\n",
    "dataFormat_For_OneHotEnc = (data\n",
    "# converts all values to string                            \n",
    " .applymap(str)\n",
    "# takes the transpose                            \n",
    " .T\n",
    "# converts the data frame to a dictionary. \n",
    "# id s are the keys of the elements. \n",
    " .to_dict()                        \n",
    "# extracts the values out of the dictionary                    \n",
    " .values())\n",
    "                       \n",
    "print \"transformed Data for One hot encoding: \"\n",
    "print dataFormat_For_OneHotEnc\n",
    "\n",
    "dv = DictVectorizer(sparse=False)\n",
    "dv.fit(dataFormat_For_OneHotEnc)\n",
    "dv.transform(dataFormat_For_OneHotEnc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(20720L, 72L)\n",
      "[[ 1.  0.  0. ...,  0.  0.  1.]\n",
      " [ 1.  0.  0. ...,  0.  1.  0.]\n",
      " [ 0.  1.  0. ...,  0.  1.  0.]\n",
      " ..., \n",
      " [ 0.  1.  0. ...,  0.  1.  0.]\n",
      " [ 1.  0.  0. ...,  0.  0.  1.]\n",
      " [ 0.  1.  0. ...,  0.  1.  0.]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_extraction import DictVectorizer\n",
    "dv = (DictVectorizer(sparse=False)\n",
    "      .fit(trainData[factorVars]\n",
    "           .applymap(str)\n",
    "           .T\n",
    "           .to_dict()\n",
    "           .values())\n",
    "     )\n",
    "\n",
    "catXTrain_enc = dv.transform(trainData[factorVars].applymap(str).T.to_dict().values())\n",
    "\n",
    "print catXTrain_enc.shape\n",
    "print catXTrain_enc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(factorVars)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train data shape after transformation:  (20720L, 87L)\n",
      "Feature Set for Training: \n",
      "[[ 1.27604837  0.25208229  0.38674939 ...,  0.          0.          1.        ]\n",
      " [ 1.09678812  1.1013788  -0.26541316 ...,  0.          1.          0.        ]\n",
      " [ 1.72437213 -1.13767563 -0.70018819 ...,  0.          1.          0.        ]\n",
      " ..., \n",
      " [-0.8982757  -0.0567528   2.88670582 ...,  0.          1.          0.        ]\n",
      " [-0.94560133 -0.82884053 -1.13496323 ...,  0.          0.          1.        ]\n",
      " [-1.16803179  0.32929107 -0.59149443 ...,  0.          1.          0.        ]]\n",
      "Response for Training: \n",
      "[0 0 1 ..., 0 0 0]\n"
     ]
    }
   ],
   "source": [
    "# join every thing together. \n",
    "trainX_transformed = np.hstack((trainX_std, catXTrain_enc))\n",
    "print \"Train data shape after transformation: \", trainX_transformed.shape\n",
    "\n",
    "trainY = trainData[response].values\n",
    "\n",
    "print \"Feature Set for Training: \"\n",
    "print trainX_transformed\n",
    "\n",
    "print \"Response for Training: \"\n",
    "print trainY"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[11, 12, 13, 14, 15],\n",
       "       [21, 22, 23, 24, 25]])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar1 = np.array(  [[11, 12, 13], \n",
    "                  [21, 22, 23]])\n",
    "\n",
    "ar2 = np.array([[14, 15],\n",
    "              [24, 25]])\n",
    "\n",
    "np.hstack((ar1, ar2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# implement the pre processing pipeline as a function. \n",
    "def preProcessing(dataframe, scalarObj, encodingObj):\n",
    "    \"\"\"\n",
    "    input:\n",
    "        dataframe: the dataframe for which pre processing needs to be done. \n",
    "        scalarObj: the object returned by preprocessing.scalar.fit\n",
    "        encodingObj: the object returned after encoding categorical variables. \n",
    "    \n",
    "    output:\n",
    "        2 objects:\n",
    "            transformed set of features\n",
    "            response\n",
    "    \"\"\"\n",
    "    NumX = dataframe[numericVars]\n",
    "    CatX = dataframe[factorVars]\n",
    "    Y = dataframe[response]\n",
    "\n",
    "    # standardize the numeric variables. \n",
    "    NumX_std = scalarObj.transform(NumX)\n",
    "\n",
    "    # encode the categorical variables. \n",
    "    CatX_enc = encodingObj.transform(CatX\n",
    "                                .applymap(str)\n",
    "                                .T\n",
    "                                .to_dict()\n",
    "                                .values()\n",
    "                               )\n",
    "\n",
    "    # create the transformed training set. \n",
    "    X_transformed = np.hstack((NumX_std, CatX_enc))\n",
    "    Y = dataframe[response].values\n",
    "    return [X_transformed, Y]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Transformed training split: \n",
      "[[ 1.27604837  0.25208229  0.38674939 ...,  0.          0.          1.        ]\n",
      " [ 1.09678812  1.1013788  -0.26541316 ...,  0.          1.          0.        ]\n",
      " [ 1.72437213 -1.13767563 -0.70018819 ...,  0.          1.          0.        ]\n",
      " ..., \n",
      " [-0.8982757  -0.0567528   2.88670582 ...,  0.          1.          0.        ]\n",
      " [-0.94560133 -0.82884053 -1.13496323 ...,  0.          0.          1.        ]\n",
      " [-1.16803179  0.32929107 -0.59149443 ...,  0.          1.          0.        ]]\n",
      "Transformed testing split: \n",
      "[[-1.48569064  0.63812616  0.71283066 ...,  0.          0.          1.        ]\n",
      " [ 1.63364543  1.02417003  1.58238073 ...,  0.          0.          1.        ]\n",
      " [-1.40489079 -0.90604931  1.58238073 ...,  0.          0.          1.        ]\n",
      " ..., \n",
      " [ 1.73429897  1.48742266 -0.04802564 ...,  0.          1.          0.        ]\n",
      " [-1.52609057 -0.21117035  2.01715576 ...,  0.          1.          0.        ]\n",
      " [ 0.81421949 -0.75163176 -1.13496323 ...,  0.          0.          1.        ]]\n"
     ]
    }
   ],
   "source": [
    "trainX_transformed, trainY = preProcessing(trainData, scaler, dv)\n",
    "testX_transformed, testY = preProcessing(testData,  scaler, dv)\n",
    "validationX_transformed, validation_Y = preProcessing(validateData, scaler, dv)\n",
    "\n",
    "print \"Transformed training split: \"\n",
    "print trainX_transformed\n",
    "\n",
    "print \"Transformed testing split: \"\n",
    "print testX_transformed"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Now a bit of machine learning! "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<bound method KNeighborsClassifier.fit of KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
      "           metric_params=None, n_jobs=1, n_neighbors=3, p=2,\n",
      "           weights='uniform')>\n"
     ]
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "neigh = KNeighborsClassifier(n_neighbors=3 )\n",
    "neigh.fit(trainX_transformed, trainY) \n",
    "print neigh.fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1.          0.        ]\n",
      " [ 0.66666667  0.33333333]\n",
      " [ 0.66666667  0.33333333]\n",
      " ..., \n",
      " [ 1.          0.        ]\n",
      " [ 0.66666667  0.33333333]\n",
      " [ 1.          0.        ]]\n"
     ]
    }
   ],
   "source": [
    "insampleScores = neigh.predict_proba(trainX_transformed)\n",
    "print insampleScores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 0, 0, 0, 0, 0, 1, 0, 0, 0]\n",
      "Accuracy:  0.861293436293\n"
     ]
    }
   ],
   "source": [
    "threshold = 0.5\n",
    "insamplePredictions = [1 if eachScore[1] > threshold else 0 for eachScore in insampleScores  ]\n",
    "print insamplePredictions[:10]\n",
    "print \"Accuracy: \", np.mean(insamplePredictions == trainY)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 1, 1, 1, 0, 1, 1, 0, 1]\n",
      "Accuracy:  0.767326254826\n"
     ]
    }
   ],
   "source": [
    "threshold = 0.01\n",
    "insamplePredictions = [1 if eachScore[1] > threshold else 0 for eachScore in insampleScores  ]\n",
    "print insamplePredictions[:10]\n",
    "print \"Accuracy: \", np.mean(insamplePredictions == trainY)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 0 0 ..., 0 0 0]\n"
     ]
    }
   ],
   "source": [
    "# Get the predictions on the training data: In sample predictions! \n",
    "insamplePredictions = neigh.predict(trainX_transformed)\n",
    "print insamplePredictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   observed  predicted\n",
      "0         0          0\n",
      "1         0          0\n",
      "2         1          0\n",
      "3         0          0\n",
      "4         1          0\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>predicted</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>observed</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>15253</td>\n",
       "      <td>804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2070</td>\n",
       "      <td>2593</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "predicted      0     1\n",
       "observed              \n",
       "0          15253   804\n",
       "1           2070  2593"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt = pd.DataFrame( {\"observed\": trainY, \n",
    "                    \"predicted\": insamplePredictions})\n",
    "print dt.head()\n",
    "pd.crosstab(dt['observed'], dt['predicted'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# How good was the prediction on the training data ?\n",
    "print 'In Sample Accuracy: ', 100 * np.mean(trainY == insamplePredictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Working with the test split. \n",
    "# Implement the pre processing pipeline on the test split. \n",
    "testX_transformed, testY = preProcessing(testData,  scaler, dv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# now predict on the testX_transformed data. \n",
    "oosPred_test = neigh.predict(testX_transformed)\n",
    "print oosPred_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "oosAccuracyTest = np.mean(testY == oosPred_test)\n",
    "print \"Accuracy on the testing split: \", oosAccuracyTest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "validationX_transformed, validation_Y = preProcessing(validateData, scaler, dv)\n",
    "oosPred_validation = neigh.predict(validationX_transformed)\n",
    "oosAccuracyValidation = np.mean(validation_Y == oosPred_validation)\n",
    "print \"Accuracy on the validation split: \", oosAccuracyValidation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Choose an optimal tuning parameter: K"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "N_grid = [3, 5, 7, 9, 13, 15]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "oosAccuracyList = []\n",
    "\n",
    "for eachN in N_grid:\n",
    "#      fit the nearest neighbour for each\n",
    "#       value in the set of candidate values.\n",
    "    neigh = KNeighborsClassifier(n_neighbors= eachN)\n",
    "    neigh.fit(trainX_transformed, trainY) \n",
    "    \n",
    "    \n",
    "#     using the fitted model get the predictions\n",
    "#     on the testing split. \n",
    "    oosPred_test = neigh.predict(testX_transformed)\n",
    "    \n",
    "#     Calculate the accuracy on the test split.\n",
    "    oosAccuracyTest = np.mean(testY == oosPred_test)\n",
    "    \n",
    "#     Add it to the list\n",
    "    oosAccuracyList.append(oosAccuracyTest)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "plt.plot(N_grid, oosAccuracyList)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fitting a random forest classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
      "            max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
      "            min_samples_leaf=1, min_samples_split=2,\n",
      "            min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=1,\n",
      "            oob_score=False, random_state=None, verbose=0,\n",
      "            warm_start=False)\n",
      "Out of sample Accuracy for random forests:  0.805405405405\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rf = RandomForestClassifier()\n",
    "rf.fit(trainX_transformed, trainY)\n",
    "\n",
    "print rf\n",
    "oosPredictRF_test = rf.predict(testX_transformed)\n",
    "print 'Out of sample Accuracy for random forests: ', np.mean(testY == oosPredictRF_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Tuning the random forest classifier. RF's have 2 tuning parameters: n_estimators & max_features\n",
    "\n",
    "# create a 2 dimensional grid of candidate_values:\n",
    "grid_n_estimators = [10, 100, 1000]\n",
    "max_features = [10, 20, 30, 40]\n",
    "\n",
    "import itertools\n",
    "grid2D = [element for element in itertools.product(grid_n_estimators, max_features)]\n",
    "print grid2D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "oosAccuracyList_RF = list()\n",
    "for eachVal in grid2D:\n",
    "    rf = (RandomForestClassifier(n_estimators= eachVal[0],\n",
    "                                 max_features= eachVal[1], \n",
    "                                n_jobs = -1)\n",
    "          .fit(trainX_transformed, trainY))\n",
    "    oosPredictRF_test = rf.predict(testX_transformed)\n",
    "    oosAccuracyList_RF.append(np.mean(testY == oosPredictRF_test))\n",
    "\n",
    "print oosAccuracyList_RF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "zip(grid2D, oosAccuracyList_RF)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# final model: rf with n_estimators  = 100, max_features = 10\n",
    "finalModel = (RandomForestClassifier(n_estimators= 100, \n",
    "                                    max_features= 10)\n",
    "              .fit(trainX_transformed, \n",
    "                   trainY)\n",
    "              )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Performance on the validation set. \n",
    "oosAccuracy_validation = np.mean(validation_Y == finalModel.predict(validationX_transformed))\n",
    "print oosAccuracy_validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "len(trainY)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Advanced Topics in Machine Learning! "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Getting scores from classifiers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "neigh =  KNeighborsClassifier(n_neighbors = 5)\n",
    "neigh.fit(trainX_transformed, trainY) \n",
    "\n",
    "oosProb = neigh.predict_proba(testX_transformed)\n",
    "print oosProb\n",
    "\n",
    "oosOutcome = [1 if i[1] > 0.5 else 0 for i in oosProb ]\n",
    "print oosOutcome[:10]\n",
    "print np.mean(oosOutcome == testY)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "oosOutcome = neigh.predict(testX_transformed)\n",
    "print np.mean(oosOutcome == testY)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# change the threshold to 0.6\n",
    "oosOutcome = [1 if i[1] > 0.6 else 0 for i in oosProb ]\n",
    "print oosOutcome[:10]\n",
    "print np.mean(oosOutcome == testY)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Computing Sensitivity, Specificity from Confusion Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[15253   804]\n",
      " [ 2070  2593]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "print confusion_matrix(trainY, insamplePredictions )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sensitivity (TPR) :  0.556079776968\n",
      "Specificity (1 - FPR):  0.949928380146\n"
     ]
    }
   ],
   "source": [
    "def calculate_metrics(confusionMatrix):\n",
    "    \"\"\"\n",
    "    Compute sensitivity and specificity \n",
    "    from a confusion matrix\n",
    "    \"\"\"\n",
    "    tp = confusionMatrix[1,1]\n",
    "    tn = confusionMatrix[0, 0]\n",
    "    fp = confusionMatrix[0, 1]\n",
    "    fn = confusionMatrix[1, 0] \n",
    "    sens = float(tp) / (tp + fn)\n",
    "    spec = float(tn) / (tn + fp)\n",
    "    return sens, spec\n",
    "\n",
    "print 'Sensitivity (TPR) : ', calculate_metrics(confusion_matrix(trainY, insamplePredictions ))[0]\n",
    "print 'Specificity (1 - FPR): ', calculate_metrics(confusion_matrix(trainY, insamplePredictions ))[1]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:  0.767326254826\n",
      "Sensitivity (TPR) :  1.0\n",
      "Specificity (1 - FPR):  0.699757115277\n"
     ]
    }
   ],
   "source": [
    "threshold = 0.01\n",
    "insamplePredictions = [1 if eachScore[1] > threshold else 0 for eachScore in insampleScores  ]\n",
    "\n",
    "print \"Accuracy: \", np.mean(insamplePredictions == trainY)\n",
    "print 'Sensitivity (TPR) : ', calculate_metrics(confusion_matrix(trainY, insamplePredictions ))[0]\n",
    "print 'Specificity (1 - FPR): ', calculate_metrics(confusion_matrix(trainY, insamplePredictions ))[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:  0.819739382239\n",
      "Sensitivity (TPR) :  0.199013510615\n",
      "Specificity (1 - FPR):  1.0\n"
     ]
    }
   ],
   "source": [
    "threshold = 0.9\n",
    "insamplePredictions = [1 if eachScore[1] > threshold else 0 for eachScore in insampleScores  ]\n",
    "\n",
    "print \"Accuracy: \", np.mean(insamplePredictions == trainY)\n",
    "print 'Sensitivity (TPR) : ', calculate_metrics(confusion_matrix(trainY, insamplePredictions ))[0]\n",
    "print 'Specificity (1 - FPR): ', calculate_metrics(confusion_matrix(trainY, insamplePredictions ))[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plotting ROC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0xaa652e8>]"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xf6c0748>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import roc_curve\n",
    "fpr, tpr, thresholds = roc_curve(trainY, [i[1] for i in insampleScores ])\n",
    "plt.plot(fpr, tpr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "####  Calculating Area under the ROC curve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Area under the ROC Curve : 0.913304710322\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import roc_auc_score\n",
    "print \"Area under the ROC Curve :\", roc_auc_score(trainY, [i[1] for i in insampleScores])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Selecting tuning parameters in K nearest neighbour using combination of grid search and cross validation. The error metric is AUC instead of accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(3, 0.66516976264208438), (5, 0.69248410947492811), (7, 0.70473326362029309)]"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import cross_validation\n",
    "from sklearn.metrics import roc_auc_score, auc, roc_curve\n",
    "# grid for searching optimal value of K in K-nearest neighbour. \n",
    "K_grid = [3, 5, 7]\n",
    "# set up the folds of data for cross validation. \n",
    "cv_folds = cross_validation.KFold(len(trainY),\n",
    "                                 n_folds = 3, \n",
    "                                 shuffle = True,\n",
    "                                 random_state = 4)\n",
    "aucList = list()\n",
    "for eachK in K_grid:\n",
    "# Keep appending to this list. \n",
    "    eachAUC = list()\n",
    "    for trainInd, testInd in cv_folds:\n",
    "# Prepare the training data        \n",
    "        forTrainX = trainX_transformed[trainInd]\n",
    "        forTrainY = trainY[trainInd]\n",
    "# Prepare the testing data\n",
    "        forTestX = trainX_transformed[testInd]\n",
    "        forTestY = trainY[testInd]\n",
    "# Instantiate the model object in each case. \n",
    "        neigh = KNeighborsClassifier(n_neighbors = eachK)\n",
    "        neigh.fit(forTrainX, forTrainY) \n",
    "# out of sample prediction probabilities\n",
    "        oosProb = neigh.predict_proba(forTestX)\n",
    "# Calculate the auc.     \n",
    "        rocVal = roc_auc_score(forTestY, [i[1] for i in oosProb])\n",
    "        eachAUC.append(rocVal)\n",
    "        \n",
    "    aucList.append(eachAUC)\n",
    "    \n",
    "zip(K_grid, [np.mean(i) for i in aucList])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[0.66953523097728573, 0.668695325730992, 0.65727873121797542],\n",
       " [0.70012977339135984, 0.68659516989385927, 0.69072738513956522],\n",
       " [0.71146583920003925, 0.70091196710882886, 0.70182198455201117]]"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "aucList"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}

{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "580e0c23",
   "metadata": {},
   "source": [
    "# Asumptions of the Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "cfa158c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "from pptx import Presentation\n",
    "from pptx.util import Inches, Pt\n",
    "from pptx.enum.shapes import MSO_SHAPE\n",
    "from pptx.dml.color import RGBColor"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59d4c01e",
   "metadata": {},
   "source": [
    "Examples Using the German Credit Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "9b4d7ce1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the dataset\n",
    "url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data'\n",
    "columns = [\n",
    "    'Status', 'Duration', 'CreditHistory', 'Purpose', 'CreditAmount', 'Savings', 'EmploymentSince',\n",
    "    'InstallmentRate', 'PersonalStatusSex', 'OtherDebtors', 'ResidenceSince', 'Property', 'Age',\n",
    "    'OtherInstallmentPlans', 'Housing', 'ExistingCredits', 'Job', 'NumPeopleLiable', 'Telephone',\n",
    "    'ForeignWorker', 'Target'\n",
    "]\n",
    "df = pd.read_csv(url, sep=' ', header=None, names=columns)\n",
    "\n",
    "# Encode the target variable: 1 for good credit, 0 for bad credit\n",
    "df['Target'] = df['Target'].map({1: 1, 2: 0})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "8eaf4c7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Status</th>\n",
       "      <th>Duration</th>\n",
       "      <th>CreditHistory</th>\n",
       "      <th>Purpose</th>\n",
       "      <th>CreditAmount</th>\n",
       "      <th>Savings</th>\n",
       "      <th>EmploymentSince</th>\n",
       "      <th>InstallmentRate</th>\n",
       "      <th>PersonalStatusSex</th>\n",
       "      <th>OtherDebtors</th>\n",
       "      <th>...</th>\n",
       "      <th>Property</th>\n",
       "      <th>Age</th>\n",
       "      <th>OtherInstallmentPlans</th>\n",
       "      <th>Housing</th>\n",
       "      <th>ExistingCredits</th>\n",
       "      <th>Job</th>\n",
       "      <th>NumPeopleLiable</th>\n",
       "      <th>Telephone</th>\n",
       "      <th>ForeignWorker</th>\n",
       "      <th>Target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A11</td>\n",
       "      <td>6</td>\n",
       "      <td>A34</td>\n",
       "      <td>A43</td>\n",
       "      <td>1169</td>\n",
       "      <td>A65</td>\n",
       "      <td>A75</td>\n",
       "      <td>4</td>\n",
       "      <td>A93</td>\n",
       "      <td>A101</td>\n",
       "      <td>...</td>\n",
       "      <td>A121</td>\n",
       "      <td>67</td>\n",
       "      <td>A143</td>\n",
       "      <td>A152</td>\n",
       "      <td>2</td>\n",
       "      <td>A173</td>\n",
       "      <td>1</td>\n",
       "      <td>A192</td>\n",
       "      <td>A201</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>A12</td>\n",
       "      <td>48</td>\n",
       "      <td>A32</td>\n",
       "      <td>A43</td>\n",
       "      <td>5951</td>\n",
       "      <td>A61</td>\n",
       "      <td>A73</td>\n",
       "      <td>2</td>\n",
       "      <td>A92</td>\n",
       "      <td>A101</td>\n",
       "      <td>...</td>\n",
       "      <td>A121</td>\n",
       "      <td>22</td>\n",
       "      <td>A143</td>\n",
       "      <td>A152</td>\n",
       "      <td>1</td>\n",
       "      <td>A173</td>\n",
       "      <td>1</td>\n",
       "      <td>A191</td>\n",
       "      <td>A201</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>A14</td>\n",
       "      <td>12</td>\n",
       "      <td>A34</td>\n",
       "      <td>A46</td>\n",
       "      <td>2096</td>\n",
       "      <td>A61</td>\n",
       "      <td>A74</td>\n",
       "      <td>2</td>\n",
       "      <td>A93</td>\n",
       "      <td>A101</td>\n",
       "      <td>...</td>\n",
       "      <td>A121</td>\n",
       "      <td>49</td>\n",
       "      <td>A143</td>\n",
       "      <td>A152</td>\n",
       "      <td>1</td>\n",
       "      <td>A172</td>\n",
       "      <td>2</td>\n",
       "      <td>A191</td>\n",
       "      <td>A201</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>A11</td>\n",
       "      <td>42</td>\n",
       "      <td>A32</td>\n",
       "      <td>A42</td>\n",
       "      <td>7882</td>\n",
       "      <td>A61</td>\n",
       "      <td>A74</td>\n",
       "      <td>2</td>\n",
       "      <td>A93</td>\n",
       "      <td>A103</td>\n",
       "      <td>...</td>\n",
       "      <td>A122</td>\n",
       "      <td>45</td>\n",
       "      <td>A143</td>\n",
       "      <td>A153</td>\n",
       "      <td>1</td>\n",
       "      <td>A173</td>\n",
       "      <td>2</td>\n",
       "      <td>A191</td>\n",
       "      <td>A201</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>A11</td>\n",
       "      <td>24</td>\n",
       "      <td>A33</td>\n",
       "      <td>A40</td>\n",
       "      <td>4870</td>\n",
       "      <td>A61</td>\n",
       "      <td>A73</td>\n",
       "      <td>3</td>\n",
       "      <td>A93</td>\n",
       "      <td>A101</td>\n",
       "      <td>...</td>\n",
       "      <td>A124</td>\n",
       "      <td>53</td>\n",
       "      <td>A143</td>\n",
       "      <td>A153</td>\n",
       "      <td>2</td>\n",
       "      <td>A173</td>\n",
       "      <td>2</td>\n",
       "      <td>A191</td>\n",
       "      <td>A201</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  Status  Duration CreditHistory Purpose  CreditAmount Savings  \\\n",
       "0    A11         6           A34     A43          1169     A65   \n",
       "1    A12        48           A32     A43          5951     A61   \n",
       "2    A14        12           A34     A46          2096     A61   \n",
       "3    A11        42           A32     A42          7882     A61   \n",
       "4    A11        24           A33     A40          4870     A61   \n",
       "\n",
       "  EmploymentSince  InstallmentRate PersonalStatusSex OtherDebtors  ...  \\\n",
       "0             A75                4               A93         A101  ...   \n",
       "1             A73                2               A92         A101  ...   \n",
       "2             A74                2               A93         A101  ...   \n",
       "3             A74                2               A93         A103  ...   \n",
       "4             A73                3               A93         A101  ...   \n",
       "\n",
       "   Property Age  OtherInstallmentPlans Housing ExistingCredits   Job  \\\n",
       "0      A121  67                   A143    A152               2  A173   \n",
       "1      A121  22                   A143    A152               1  A173   \n",
       "2      A121  49                   A143    A152               1  A172   \n",
       "3      A122  45                   A143    A153               1  A173   \n",
       "4      A124  53                   A143    A153               2  A173   \n",
       "\n",
       "  NumPeopleLiable  Telephone ForeignWorker Target  \n",
       "0               1       A192          A201      1  \n",
       "1               1       A191          A201      0  \n",
       "2               2       A191          A201      1  \n",
       "3               2       A191          A201      1  \n",
       "4               2       A191          A201      0  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "396614e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Bin de l'âge pour visualiser la relation\n",
    "df['AgeBin'] = pd.cut(df['Age'], bins=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "bf0db728",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/tb/_m1wm0vd633_w2zg_9vw_19m0000gn/T/ipykernel_84116/4268239148.py:1: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  age_grouped = df.groupby('AgeBin')['Target'].agg(['mean', 'count'])\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AgeBin</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>(18.944, 24.6]</th>\n",
       "      <td>0.590604</td>\n",
       "      <td>149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(24.6, 30.2]</th>\n",
       "      <td>0.667939</td>\n",
       "      <td>262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(30.2, 35.8]</th>\n",
       "      <td>0.717514</td>\n",
       "      <td>177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(35.8, 41.4]</th>\n",
       "      <td>0.780645</td>\n",
       "      <td>155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(41.4, 47.0]</th>\n",
       "      <td>0.716981</td>\n",
       "      <td>106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(47.0, 52.6]</th>\n",
       "      <td>0.836364</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(52.6, 58.2]</th>\n",
       "      <td>0.642857</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(58.2, 63.8]</th>\n",
       "      <td>0.692308</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(63.8, 69.4]</th>\n",
       "      <td>0.761905</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(69.4, 75.0]</th>\n",
       "      <td>0.857143</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    mean  count\n",
       "AgeBin                         \n",
       "(18.944, 24.6]  0.590604    149\n",
       "(24.6, 30.2]    0.667939    262\n",
       "(30.2, 35.8]    0.717514    177\n",
       "(35.8, 41.4]    0.780645    155\n",
       "(41.4, 47.0]    0.716981    106\n",
       "(47.0, 52.6]    0.836364     55\n",
       "(52.6, 58.2]    0.642857     42\n",
       "(58.2, 63.8]    0.692308     26\n",
       "(63.8, 69.4]    0.761905     21\n",
       "(69.4, 75.0]    0.857143      7"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "age_grouped = df.groupby('AgeBin')['Target'].agg(['mean', 'count'])\n",
    "age_grouped"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "3fc63673",
   "metadata": {},
   "outputs": [],
   "source": [
    "age_grouped['log_odds'] = np.log(age_grouped['mean'] / (1 - age_grouped['mean']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "ea6e450b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Affichage de la relation entre âge et log-odds\n",
    "plt.figure(figsize=(10, 5))\n",
    "age_grouped['log_odds'].plot(marker='o')\n",
    "plt.title(\"Relation entre l'âge et le log-odds d'obtenir un crédit (logit)\")\n",
    "plt.xlabel(\"Tranche d'âge\")\n",
    "plt.ylabel(\"Log-odds (logit)\")\n",
    "plt.grid(True)\n",
    "plt.xticks(rotation=45)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ac6c74f",
   "metadata": {},
   "source": [
    "- 1. Linearity between Independent Variables and the Log-Odds\n",
    "\n",
    "There should be a linear relationship between each continuous independent variable and the log-odds of the dependent variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "94c6715b",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pptx import Presentation\n",
    "from pptx.util import Inches, Pt\n",
    "from pptx.enum.shapes import MSO_SHAPE\n",
    "from pptx.dml.color import RGBColor\n",
    "\n",
    "def add_slide(prs, title, content_lines):\n",
    "    slide_layout = prs.slide_layouts[1]  # Title and Content\n",
    "    slide = prs.slides.add_slide(slide_layout)\n",
    "    title_placeholder = slide.shapes.title\n",
    "    content_placeholder = slide.placeholders[1]\n",
    "\n",
    "    title_placeholder.text = title\n",
    "    content_placeholder.text = \"\"\n",
    "    for line in content_lines:\n",
    "        p = content_placeholder.text_frame.add_paragraph()\n",
    "        p.text = line\n",
    "        p.level = 0\n",
    "        p.font.size = Pt(18)\n",
    "\n",
    "    return slide\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "5ae99535",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create presentation\n",
    "prs = Presentation()\n",
    "\n",
    "# Slide 1: Title\n",
    "slide_layout = prs.slide_layouts[0]\n",
    "title_slide = prs.slides.add_slide(slide_layout)\n",
    "title_slide.shapes.title.text = \"Logistic Regression: Core Assumptions\"\n",
    "title_slide.placeholders[1].text = \"Focus on the linearity of the log-odds and interpretability\"\n",
    "\n",
    "# Slide 2: Assumption Statement\n",
    "add_slide(prs, \"Key Assumption in Logistic Regression\", [\n",
    "    \"The log-odds (logit) is a linear function of the predictors:\",\n",
    "    \"log(P(Y=1)/P(Y=0)) = β0 + β1x1 + β2x2 + ... + βkxk\",\n",
    "    \"This is a fundamental modeling assumption.\"\n",
    "])\n",
    "\n",
    "# Slide 3: Why Linearity Matters\n",
    "add_slide(prs, \"Why Linearity of the Logit Matters\", [\n",
    "    \"It defines the functional form of the model.\",\n",
    "    \"Allows for straightforward estimation via maximum likelihood.\",\n",
    "    \"Enables interpretable coefficients.\",\n",
    "    \"Supports generalization and predictive stability.\"\n",
    "])\n",
    "\n",
    "# Slide 4: Interpretability of Coefficients\n",
    "add_slide(prs, \"Interpreting Coefficients\", [\n",
    "    \"Each β_j reflects the effect of x_j on the log-odds.\",\n",
    "    \"An increase of 1 unit in x_j multiplies the odds by exp(β_j).\",\n",
    "    \"This is a multiplicative effect on the odds, not on the probability.\",\n",
    "    \"Why do we say coefficients act multiplicatively on the odds?\",\n",
    "    \"Odds are defined as: odds = P(Y=1) / (1 - P(Y=1))\",\n",
    "    \"Now suppose we increase x_j by one unit, keeping other x_i constant:\",\n",
    "    \"log(odds) = β0 + β1x1 + ... + βjxj + ... + βkxk\",\n",
    "    \"Then log(odds)_new = log(odds)_old + βj\",\n",
    "    \"Exponentiating both sides gives:\",\n",
    "    \"odds_new = odds_old * exp(βj)\"\n",
    "])\n",
    "\n",
    "# Slide 5: Example of Odds Multiplication\n",
    "add_slide(prs, \"Odds Ratio Interpretation\", [\n",
    "    \"If β_age = 0.05, then:\",\n",
    "    \"Each additional year of age multiplies the odds of Y=1 by exp(0.05) ≈ 1.051.\",\n",
    "    \"That is a 5.1% increase in the odds for a one-year increase in age.\"\n",
    "])\n",
    "\n",
    "# Slide 6: User's Question: Can we test linearity by checking P(Y=1|x)?\n",
    "add_slide(prs, \"User Question: Is Checking P(Y=1|x) Sufficient?\", [\n",
    "    \"User strategy: Bin x and plot P(Y=1) per bin.\",\n",
    "    \"Check if probability curve is monotonic.\",\n",
    "    \"But: Monotonicity does not imply linearity of the logit.\",\n",
    "    \"⚠️ The monotonicity of P(Y=1 | x) does not guarantee the linearity of the logit.\",\n",
    "    \"The logistic function: P(Y=1 | x) = 1 / (1 + exp(-(β0 + β1x)))\",\n",
    "    \"is always monotonic (increasing if β1 > 0, decreasing if β1 < 0).\",\n",
    "    \"But monotonic P(Y=1 | x) does not imply that the log-odds is a linear function of x.\",\n",
    "    \"In other words:\",\n",
    "    \"✅ Linearity of the logit ⇒ monotonic P(Y=1 | x)\",\n",
    "    \"❌ Monotonic P(Y=1 | x) ⇒ linearity of the logit\"\n",
    "])\n",
    "\n",
    "# Slide 7: Why Monotonicity is Not Enough\n",
    "add_slide(prs, \"Why Monotonic P(Y=1|x) ≠ Linear Logit\", [\n",
    "    \"The logistic curve is always monotonic.\",\n",
    "    \"Monotonic probability does not ensure that logit(P(Y=1)) is linear in x.\",\n",
    "    \"You could have a monotonic but nonlinear logit function.\"\n",
    "])\n",
    "\n",
    "# Slide 8: Better Approaches to Assess Linearity\n",
    "add_slide(prs, \"How to Test Linearity of the Logit\", [\n",
    "    \"1. Plot log-odds by binned x: log(p / (1 - p))\",\n",
    "    \"2. Include polynomial terms (e.g., x²) or splines.\",\n",
    "    \"3. Use GAMs (Generalized Additive Models) to model logit = s(x).\"\n",
    "])\n",
    "\n",
    "# Slide 9: Visualizing Nonlinearity with Splines\n",
    "add_slide(prs, \"Example: GAM with Splines on Age (German Credit)\", [\n",
    "    \"A cubic spline is fit to model the log-odds of credit approval vs age.\",\n",
    "    \"Splines help capture subtle nonlinear patterns not detected in linear models.\",\n",
    "    \"This supports the idea that linearity might not hold globally.\",\n",
    "    \"Model fitted using statsmodels + patsy (B-spline basis).\",\n",
    "    \"Visual shows actual data and smooth logit prediction curve.\"\n",
    "])\n",
    "\n",
    "# Slide 10: Validating Spline Use\n",
    "add_slide(prs, \"Spline Use: Empirical and Statistical Justification\", [\n",
    "    \"Splines in GAMs offer flexible modeling of nonlinear relationships.\",\n",
    "    \"They can be evaluated using:\",\n",
    "    \"- Likelihood ratio tests\",\n",
    "    \"- AIC/BIC comparison\",\n",
    "    \"- Cross-validation\",\n",
    "    \"- p-values of spline basis terms\",\n",
    "    \"These tools help determine if the added complexity is justified.\"\n",
    "])\n",
    "\n",
    "# Slide 11: Independence of Observations\n",
    "add_slide(prs, \"Independence of Observations\", [\n",
    "    \"Assumption: Each observation should be independent of the others.\",\n",
    "    \"For time-series or grouped data, check autocorrelation using ACF plots.\",\n",
    "    \"For the German Credit dataset: Likely satisfied (no time structure).\",\n",
    "    \"Code example: plot_acf(df['Duration'])\"\n",
    "])\n",
    "\n",
    "# Slide 12: Multicollinearity Check\", [\n",
    "add_slide(prs, \"Multicollinearity Check\", [\n",
    "    \"Assumption: Predictors should not be highly correlated.\",\n",
    "    \"Check using Variance Inflation Factor (VIF).\",\n",
    "    \"Rule of thumb: VIF > 5 or 10 → strong multicollinearity.\",\n",
    "    \"Code snippet:\",\n",
    "    \"from statsmodels.stats.outliers_influence import variance_inflation_factor\",\n",
    "    \"[variance_inflation_factor(X_scaled, i) for i in range(X_scaled.shape[1])]\"\n",
    "])\n",
    "\n",
    "# Slide 13: Sample Size Sufficiency\n",
    "add_slide(prs, \"Sample Size Sufficiency\", [\n",
    "    \"Rule of thumb: ≥10 events per predictor variable.\",\n",
    "    \"Helps avoid overfitting and ensures model stability.\",\n",
    "    \"Example: If 100 positive cases and 10 predictors → safe to proceed.\",\n",
    "    \"Code: df['target'].value_counts()  # Count events/non-events\"\n",
    "])\n",
    "\n",
    "# Slide 14: Outlier Detection\n",
    "add_slide(prs, \"Outlier Detection with Cook's Distance\", [\n",
    "    \"Outliers can exert disproportionate influence on the model.\",\n",
    "    \"Cook's distance helps detect influential observations.\",\n",
    "    \"High Cook's D suggests review/removal.\",\n",
    "    \"Code: influence = model.get_influence(); cooks = influence.cooks_distance[0]\"\n",
    "])\n",
    "\n",
    "# Slide 15: Binary Target Variable\n",
    "add_slide(prs, \"Check Binary Target\", [\n",
    "    \"Logistic regression requires a binary dependent variable.\",\n",
    "    \"Only two values (0 and 1) should exist in the target column.\",\n",
    "    \"Code example: df['target'].value_counts()\",\n",
    "    \"If more than two classes → consider one-vs-rest or multinomial models.\"\n",
    "])\n",
    "\n",
    "# Save the presentation\n",
    "prs.save(\"logistic_regression_assumptions.pptx\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "c287a77d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save the presentation\n",
    "prs.save(\"logistic_regression_assumptions.pptx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "629cc9a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/davidtbo/Documents/Data_Science/10_Generalized_Linear_Model/LogisticRegression/.venv/lib/python3.13/site-packages/sklearn/linear_model/_logistic.py:465: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. OF ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/davidtbo/Documents/Data_Science/10_Generalized_Linear_Model/LogisticRegression/.venv/lib/python3.13/site-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but PolynomialFeatures was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn.pipeline import make_pipeline\n",
    "\n",
    "# Load German Credit dataset\n",
    "url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data'\n",
    "columns = [\n",
    "    'Status', 'Duration', 'CreditHistory', 'Purpose', 'CreditAmount', 'Savings', 'EmploymentSince',\n",
    "    'InstallmentRate', 'PersonalStatusSex', 'OtherDebtors', 'ResidenceSince', 'Property', 'Age',\n",
    "    'OtherInstallmentPlans', 'Housing', 'ExistingCredits', 'Job', 'NumPeopleLiable', 'Telephone',\n",
    "    'ForeignWorker', 'Target'\n",
    "]\n",
    "df = pd.read_csv(url, sep=' ', header=None, names=columns)\n",
    "df['Target'] = df['Target'].map({1: 1, 2: 0})  # 1 = Good, 0 = Bad credit\n",
    "\n",
    "# Prepare predictor and target\n",
    "X = df[['Age']]\n",
    "y = df['Target']\n",
    "\n",
    "# Fit a cubic logistic regression model using polynomial features\n",
    "model = make_pipeline(PolynomialFeatures(degree=3), LogisticRegression())\n",
    "model.fit(X, y)\n",
    "\n",
    "# Generate predictions over a smooth range of ages\n",
    "age_range = np.linspace(X.min(), X.max(), 300).reshape(-1, 1)\n",
    "predicted_probs = model.predict_proba(age_range)[:, 1]\n",
    "\n",
    "# Plot the observed data and the fitted curve\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.scatterplot(x='Age', y='Target', data=df, alpha=0.3, label='Observed (Y=1)')\n",
    "plt.plot(age_range, predicted_probs, color='red', linewidth=2, label='Cubic Polynomial Fit')\n",
    "plt.title(\"Cubic Polynomial Fit of Logit vs Age\")\n",
    "plt.xlabel(\"Age\")\n",
    "plt.ylabel(\"P(Y=1 | Age)\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    4.0\n",
       "1    8.0\n",
       "2    8.1\n",
       "3   -4.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_series = pd.Series([4, 8, 8.1, -4])\n",
    "pandas_series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "a    4.0\n",
       "c    8.0\n",
       "b    8.1\n",
       "d   -4.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_series = pd.Series([4, 8, 8.1, -4], index = [\"a\", \"c\", \"b\", \"d\"])\n",
    "pandas_series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_series[\"a\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_series[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "a    4.0\n",
       "c    8.0\n",
       "b    8.1\n",
       "dtype: float64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_series[pandas_series > 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "dataframe = pd.DataFrame(np.random.randn(20, 5), \n",
    "                         columns = ['A', 'B', 'C', 'D', 'E'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          A         B         C         D         E\n",
      "0 -0.290419  1.561366  0.444725 -1.740062 -0.862661\n",
      "1 -0.526600  1.008816  1.122681  0.273012 -1.421712\n",
      "2  0.213617 -0.542714 -0.303236  0.023847  0.591010\n",
      "3  0.024423 -0.847366  0.619725 -0.950476  0.283424\n",
      "4  0.564569 -1.047588  0.501380  0.803968  0.247216\n"
     ]
    }
   ],
   "source": [
    "print dataframe.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           A         B         C         D         E\n",
      "18 -0.346790  1.755708 -0.454302  0.402435  1.254876\n",
      "19 -0.708112  1.488652 -1.319781 -0.605020  1.189411\n"
     ]
    }
   ],
   "source": [
    "print dataframe.tail(n = 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "               A          B          C          D          E\n",
      "count  20.000000  20.000000  20.000000  20.000000  20.000000\n",
      "mean    0.007123   0.185548   0.206357  -0.171091   0.043229\n",
      "std     0.838434   1.092425   0.790561   1.005419   0.779385\n",
      "min    -1.287685  -1.576960  -1.319781  -1.886101  -1.421712\n",
      "25%    -0.571664  -0.618877  -0.244311  -1.030358  -0.601263\n",
      "50%    -0.132998   0.335455   0.321518   0.117263   0.093881\n",
      "75%     0.554172   1.040512   0.597837   0.476183   0.607205\n",
      "max     1.611112   1.913261   1.881350   1.450415   1.254876\n"
     ]
    }
   ],
   "source": [
    "print dataframe.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           A         B         C         D         E\n",
      "19 -0.708112  1.488652 -1.319781 -0.605020  1.189411\n",
      "6   1.611112 -0.217754 -1.309464  0.288274  0.836276\n",
      "5  -1.287685 -1.195054 -0.465735 -1.361281 -0.059454\n",
      "18 -0.346790  1.755708 -0.454302  0.402435  1.254876\n",
      "2   0.213617 -0.542714 -0.303236  0.023847  0.591010\n"
     ]
    }
   ],
   "source": [
    "print dataframe.sort_values(by='C').head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           A         B         C         D         E\n",
      "19 -0.708112  1.488652 -1.319781 -0.605020  1.189411\n",
      "18 -0.346790  1.755708 -0.454302  0.402435  1.254876\n",
      "17 -0.706858  0.514375  1.186717  0.753754  1.234439\n",
      "16  1.343936  1.913261  0.527243 -0.364412 -0.760375\n",
      "15 -0.903748 -0.259614  0.590542 -1.270001 -0.259422\n"
     ]
    }
   ],
   "source": [
    "print dataframe.sort_index(ascending = False).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0   -0.290419\n",
      "1   -0.526600\n",
      "2    0.213617\n",
      "3    0.024423\n",
      "4    0.564569\n",
      "Name: A, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print dataframe['A'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          A         B         C         D         E\n",
      "1 -0.526600  1.008816  1.122681  0.273012 -1.421712\n",
      "2  0.213617 -0.542714 -0.303236  0.023847  0.591010\n"
     ]
    }
   ],
   "source": [
    "print dataframe[1:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          A         B\n",
      "0 -0.290419  1.561366\n",
      "1 -0.526600  1.008816\n",
      "2  0.213617 -0.542714\n",
      "3  0.024423 -0.847366\n",
      "4  0.564569 -1.047588\n"
     ]
    }
   ],
   "source": [
    "print dataframe[['A', 'B']].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    A   B    C\n",
      "aa  4  10  100\n",
      "aa  5  20   50\n",
      "bb  6  30  -30\n",
      "cc  7  40  -50\n"
     ]
    }
   ],
   "source": [
    "df = pd.DataFrame({'A' : [4,5,6,7],\n",
    "                   'B' : [10,20,30,40],\n",
    "                   'C' : [100,50,-30,-50]})\n",
    "df.index = ['aa', 'aa', 'bb', 'cc']\n",
    "print df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    A   B    C\n",
      "aa  4  10  100\n",
      "aa  5  20   50\n"
     ]
    }
   ],
   "source": [
    "# label based indexing. \n",
    "print df.loc['aa']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A     6\n",
      "B    30\n",
      "Name: bb, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print df.loc['bb', ['A', 'B']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    A   B    C\n",
      "aa  4  10  100\n",
      "aa  5  20   50\n",
      "bb  6  30  -30\n"
     ]
    }
   ],
   "source": [
    "# positional indexing\n",
    "print df.iloc[0:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A     7\n",
      "B    40\n",
      "Name: cc, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print df.iloc[3, [0, 1]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    }
   ],
   "source": [
    "print df.ix[0, 'A']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    A   B\n",
      "aa  4  10\n",
      "aa  5  20\n"
     ]
    }
   ],
   "source": [
    "print df.ix['aa', :2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# merging datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "df1: \n",
      "  key  val1\n",
      "0   a     1\n",
      "1   b     2\n",
      "df 2\n",
      "  key  val2\n",
      "0   a     4\n",
      "1   b     5\n"
     ]
    }
   ],
   "source": [
    "df1  = pd.DataFrame({'key': ['a', 'b'], 'val1': [1, 2]})\n",
    "df2 = pd.DataFrame({'key': ['a', 'b'], 'val2': [4, 5]})\n",
    "\n",
    "print \"df1: \"\n",
    "print df1 \n",
    "\n",
    "print \"df 2\"\n",
    "print df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  key  val1  val2\n",
      "0   a     1     4\n",
      "1   b     2     5\n"
     ]
    }
   ],
   "source": [
    "print pd.merge(df1, df2, on = 'key')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  key  val1 key  val2\n",
      "0   a     1   a     4\n",
      "1   b     2   b     5\n"
     ]
    }
   ],
   "source": [
    "print pd.concat([df1, df2], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  key  val1  val2\n",
      "0   a   1.0   NaN\n",
      "1   b   2.0   NaN\n",
      "0   a   NaN   4.0\n",
      "1   b   NaN   5.0\n"
     ]
    }
   ],
   "source": [
    "print pd.concat([df1, df2], axis = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# reshaping data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Country  GDPpC  Year\n",
      "0      IN     83  1960\n",
      "1      IN    114  1970\n",
      "2      IN    375  1990\n",
      "3      SL    143  1960\n",
      "4      SL    183  1970\n",
      "5      SL    472  1990\n"
     ]
    }
   ],
   "source": [
    "long_data = pd.DataFrame({'Country': ['IN', 'IN', 'IN', 'SL', 'SL', 'SL'],\n",
    "                         'Year':[1960, 1970, 1990,1960, 1970, 1990  ],\n",
    "                         'GDPpC': [83, 114, 375, 143, 183,472]})\n",
    "print long_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Year     1960  1970  1990\n",
      "Country                  \n",
      "IN         83   114   375\n",
      "SL        143   183   472\n"
     ]
    }
   ],
   "source": [
    "print long_data.pivot('Country', 'Year', 'GDPpC')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# replacing values. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0      1.0\n",
      "1   -999.0\n",
      "2      0.5\n",
      "3      0.4\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "data = pd.Series([1, -999, 0.5,  0.4])\n",
    "print data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1.0\n",
       "1    0.0\n",
       "2    0.5\n",
       "3    0.4\n",
       "dtype: float64"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.replace(-999, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1.0\n",
       "2    0.5\n",
       "3    0.4\n",
       "dtype: float64"
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[ data > -999]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# group by demo! "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  group  value\n",
      "0     a     12\n",
      "1     a     10\n",
      "2     b      3\n",
      "3     b      6\n"
     ]
    }
   ],
   "source": [
    "dataframe = pd.DataFrame({'group': ['a', 'a', 'b', 'b'],\n",
    "                         'value':[12, 10, 3, 6]})\n",
    "print dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<pandas.core.groupby.DataFrameGroupBy object at 0x0000000008D94E80>\n"
     ]
    }
   ],
   "source": [
    "grouped = dataframe.groupby('group')\n",
    "print grouped"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       value\n",
      "group       \n",
      "a       11.0\n",
      "b        4.5\n"
     ]
    }
   ],
   "source": [
    "print grouped.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       value\n",
      "group       \n",
      "a         22\n",
      "b          9\n"
     ]
    }
   ],
   "source": [
    "print grouped.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       value\n",
      "group       \n",
      "a       11.0\n",
      "b        4.5\n"
     ]
    }
   ],
   "source": [
    "print grouped.apply(np.mean)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "## apply working on dataframes directly. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          0         1         2         3\n",
      "0  0.314065  0.554754 -0.751661 -0.107533\n",
      "1  0.016495 -1.300270 -0.628004  0.137929\n",
      "2 -1.290527  0.019890  0.238195 -0.844908\n",
      "3 -0.237241 -0.800329 -0.674857 -0.620853\n",
      "4  0.255250 -0.629075 -0.287649 -1.005348\n"
     ]
    }
   ],
   "source": [
    "dataframe =  pd.DataFrame(np.random.randn(20, 4))\n",
    "print dataframe.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     0.002406\n",
       "1    -0.443462\n",
       "2    -0.469337\n",
       "3    -0.583320\n",
       "4    -0.416705\n",
       "5     0.495137\n",
       "6     0.065748\n",
       "7    -0.186396\n",
       "8     0.213988\n",
       "9    -0.088513\n",
       "10    0.021008\n",
       "11    0.151684\n",
       "12   -0.157689\n",
       "13   -0.044400\n",
       "14    0.469043\n",
       "15    0.231060\n",
       "16   -0.167028\n",
       "17    0.508348\n",
       "18    0.016704\n",
       "19   -0.777120\n",
       "dtype: float64"
      ]
     },
     "execution_count": 230,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataframe.apply(np.mean, axis = 1 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0.220662\n",
       "1   -0.041114\n",
       "2   -0.175147\n",
       "3   -0.236170\n",
       "dtype: float64"
      ]
     },
     "execution_count": 231,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " dataframe.apply(np.mean, axis = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "## lambda operators. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 235,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f = lambda x, y: x + y\n",
    "f(1, 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           0         1         2         3\n",
      "0   0.093403  0.595867 -0.576514  0.128638\n",
      "1  -0.204167 -1.259156 -0.452857  0.374100\n",
      "2  -1.511188  0.061004  0.413342 -0.608738\n",
      "3  -0.457903 -0.759215 -0.499710 -0.384683\n",
      "4   0.034589 -0.587961 -0.112502 -0.769177\n",
      "5   0.311239  0.215096  0.901278  0.784706\n",
      "6   0.117941  0.489468  0.464024 -0.576673\n",
      "7  -1.353063  0.060957  1.342331 -0.564042\n",
      "8   1.730509  0.471536 -1.446010  0.331686\n",
      "9  -0.191989 -0.560614  0.310937  0.319382\n",
      "10  0.590336  0.179269  0.802486 -1.256292\n",
      "11  1.349860 -0.133164  0.002676 -0.380866\n",
      "12 -0.478232  0.905232 -1.055753  0.229768\n",
      "13  0.388236 -1.322808 -1.037252  2.025995\n",
      "14 -0.123654  0.597152  1.143754  0.490692\n",
      "15  1.164145  0.388809 -1.528974  1.132029\n",
      "16 -0.724733  1.088619 -0.123876 -0.676355\n",
      "17  0.832170 -0.151447  1.062346  0.522092\n",
      "18 -1.347605  0.513649  0.943147  0.189392\n",
      "19 -0.219893 -0.792292 -0.552873 -1.311654\n"
     ]
    }
   ],
   "source": [
    "print dataframe.apply(lambda x : (x - np.mean(x)), axis = 0)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}

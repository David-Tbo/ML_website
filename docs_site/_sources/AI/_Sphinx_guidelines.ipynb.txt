{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Sphinx guidelines"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## How to create a Sphinx project using Jupyter's Notebook files\n",
    "\n",
    "- Using VSCode interface  \n",
    "\n",
    "- Using Anaconda\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is possible to use a Jupyter Notebook to generate a Sphinx documentation.  \n",
    "\n",
    "Sphinx has an extension called `nbsphinx` which allows to convert a Jupyter Notebook into a Sphinx documentation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Create a new folder named 'docs' for example for your Sphinx project and open it in VSCode.  \n",
    "\n",
    "2. Open a terminal in VSCode using the menu \"Terminal\" > \"New Terminal\".  \n",
    "\n",
    "3. Make sure that you have installed Sphinx using the command:  \n",
    "\n",
    ">>> pip install sphinx  \n",
    "\n",
    "4. In order to create a new Sphinx project, use the following command  \n",
    "\n",
    ">>> sphinx-quickstart  \n",
    "\n",
    "- Answer the questions asked by the configuration assistant corresponding to your need.  \n",
    "\n",
    "- This will create a new *source* folder \"docs\" containing the files `conf.py` and `index.rst`.  \n",
    "\n",
    "In the following example of `index.rst`, the toctree directive manage the index.  \n",
    "The depth is set to 2.  \n",
    "The contents is the one available in notebooks/Bernoulli.ipynb Jupyter Notebood.  \n",
    "\n",
    ">>>Welcome to the doc's documentation!  \n",
    ">>>\\=====================================  \n",
    "\n",
    ">>>.. toctree::  \n",
    ">>>   :maxdepth: 2  \n",
    ">>>   :caption: Contents:  \n",
    ">>>  \n",
    ">>>   notebooks/Sphinx_guidelines.ipynb  \n",
    "\n",
    "5. Install the nbsphinx extension using the pip command:  \n",
    "\n",
    ">>> pip install nbsphinx  \n",
    "\n",
    "6. Add the nbsphinx extension into the file `conf.py` by adding the line:  \n",
    "\n",
    ">>> extensions = ['nbsphinx']  \n",
    "  \n",
    "Like in Python, the comments are precedeed by an asterisk (*)  \n",
    "\n",
    "7. In the *source* folder \"docs\", create a new folder named 'notebooks' to store your Jupyter Notebook files.  \n",
    "\n",
    "- Copy your Jupyter Notebook in this folder.  \n",
    "\n",
    "- Add a .rst file `mgt_notebook.rst` for instance in the *source* folder (projet_sphinx) for each Jupyter Notebook that you want to include in your documentation.  \n",
    "\n",
    "To display the content of a Jupyter notebook file \"Bernoulli.ipynb\" and run it within an .rst file, you can use the `.. jupyter-execute::` directive with the `:hide-code:` option.  \n",
    "This will execute the code contained in the notebook and display the output, while hiding the code itself. Here is an example:  \n",
    "\n",
    ">>>.. jupyter-execute:  \n",
    ">>>   :hide-code  \n",
    ">>>  \n",
    ">>>   \"notebooks/Sphinx_guidelines.ipynb\"  \n",
    "\n",
    "8. In the root folder of your project \"projet_Sphinx\", generate the documentation using the command line:  \n",
    "\n",
    ">>> make html  \n",
    "\n",
    "This will create the folder **_build** containing the generated documentation.  \n",
    "\n",
    "9. You can visualize the generated documentation if you open the file **index.html** in the folder **_build/html** with a web navigator.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In our example the architecture of the project folder will be:  \n",
    "\n",
    "- projet_sphinx  \n",
    "    - Makefile  \n",
    "    - _build  \n",
    "    - static  \n",
    "    - _templates  \n",
    "    - conf.py  \n",
    "    - index.rst  \n",
    "    - make.bat  \n",
    "    - notebook.rst  \n",
    "    - notebooks\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Complements: "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The minimal content of the *conf.py* file is:  \n",
    "\n",
    ">>>\\# Configuration file for the Sphinx documentation builder.\n",
    ">>>\n",
    ">>>\\# -- Project information -----------------------------------------------------\n",
    ">>>\n",
    ">>>project = 'My Project'  \n",
    ">>>copyright = '2024, My Name'  \n",
    ">>>author = 'My Name'  \n",
    ">>>\n",
    ">>>\\# -- General configuration ---------------------------------------------------\n",
    ">>>\n",
    ">>>extensions = ['nbsphinx']\n",
    ">>>\n",
    ">>>\\# -- Options for HTML output -------------------------------------------------\n",
    ">>>\n",
    ">>>html_theme = 'alabaster'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* The reStructuredText (reST)  \n",
    "\n",
    "The .rst extension is used for plain text files written in the reStructuredText (reST) markup language. reStructuredText is a lightweight markup language used for authoring technical documentation, books, reports, and other documents.  \n",
    "It allows for creating structured and readable documents while being easy to write and read.  \n",
    "\n",
    ".rst files contain plain text formatted with reST directives and roles.  \n",
    "Directives are special instructions that tell a reST document processor (such as Sphinx) how to process the text.  \n",
    "Roles are markers that indicate how to interpret a piece of text.  \n",
    "For example, the :code: role is used to indicate that the following text is computer code.  \n",
    "\n",
    ".rst files can be converted to various output formats, such as HTML, PDF, LaTeX, etc., using document processing tools like Sphinx or Docutils.  \n",
    "\n",
    "In summary, the .rst extension is used for plain text files written in the reStructuredText markup language, which is a lightweight markup language used for creating structured and readable documents."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can then create a Sphinx documentation from your Jupyter Notebook file using the following command:  \n",
    "\n",
    ">>> sphinx-build path/to/notebook path/to/output   \n",
    "\n",
    "where *path/to/notebook* is the path to your Jupyter Notebook file and *path/to/output* is the path to your output folder of the generated documentation.  \n",
    "\n",
    "When using nbsphinx, the code cells in the Jupyter Notebook file are executed and their results are included in the generated documentation.\n",
    "\n",
    "You can also include Markdown cells in your Jupyter Notebook file to add additional documentation.\n",
    "\n",
    "For more information on using nbsphinx, you can refer to the official Sphinx documentation: https://www.sphinx-doc.org/en/master/usage/extensions/nbsphinx.html"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<u>With the Anaconda interface</u>:  \n",
    "\n",
    "1. Create a new folder for your Sphinx project and open it with the Anaconda.    \n",
    "\n",
    "2. Create a new Anaconda environment for your Sphinx project using the menu \"Environments\" > \"Create\".  \n",
    "\n",
    "3. Install Sphinx and the nbsphinx extension in this environment using the command:  \n",
    "\n",
    ">>> conda install sphinx nbsphinx  \n",
    "\n",
    "Error with conda for nbsphinx, preferable to use: pip install nbsphinx  \n",
    "\n",
    "4. Open a terminal in the Anaconda Navigator using the menu: \"Environments\" > \"Terminal\".  \n",
    "\n",
    "5. Use the **sphinx-quickstart** commnad to create a new Sphinx project.  \n",
    "- Answer the questions of hte configuration assistant corresponding to your needs.  \n",
    "- This will create the source folder containing the files **conf.py** and **index.rst**.  \n",
    "\n",
    "6. Add the nbsphinx extension in the conf.py file typing the line:  \n",
    "\n",
    ">>>extensions = ['nbsphinx']  \n",
    "\n",
    "7. Create a new folder in the source folder for your Jupyter Notebook.  \n",
    "- Copy your Jupyter Notebook files in this folder.  \n",
    "- Add the .rst file in the source folder for each Jupyter Notebook file that you want to include in your documentation.  \n",
    "- In this file, use the following nbsphinx directive to include the Jupyter Notebook file, for instance:  \n",
    "\n",
    ">>>.. nbinclude:: mon_notebook.ipynb  \n",
    "\n",
    "8. In the root folder of your project \"projet_Sphinx\", generate the documentation using the command line:  \n",
    "\n",
    ">>> make html  \n",
    "\n",
    "This will create the folder **_build** containing the generated documentation.  \n",
    "\n",
    "9. You can visualize the generated documentation if you open the file **index.html** in the folder **_build/html** with a web navigator.\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
